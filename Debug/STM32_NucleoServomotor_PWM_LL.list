
STM32_NucleoServomotor_PWM_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001ef4  08001ef4  00011ef4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f30  08001f30  00011f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f34  08001f34  00011f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000ec  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000f8  200000f8  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016b6b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e3e  00000000  00000000  00036ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000970  00000000  00000000  000399e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d90  00000000  00000000  0003a358  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000603f  00000000  00000000  0003b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003d98  00000000  00000000  00041127  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00044ebf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ac8  00000000  00000000  00044f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00007185  00000000  00000000  00046a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001edc 	.word	0x08001edc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001edc 	.word	0x08001edc

080001c8 <arm_pid_init_f32>:
void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80001c8:	ed90 7a06 	vldr	s14, [r0, #24]
 80001cc:	edd0 7a07 	vldr	s15, [r0, #28]
 80001d0:	edd0 6a08 	vldr	s13, [r0, #32]
 80001d4:	ee77 7a27 	vadd.f32	s15, s14, s15

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80001d8:	edc0 6a02 	vstr	s13, [r0, #8]
  S->A0 = S->Kp + S->Ki + S->Kd;
 80001dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80001e0:	edc0 7a00 	vstr	s15, [r0]
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 80001e4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80001e8:	ee96 7ae7 	vfnma.f32	s14, s13, s15
 80001ec:	ed80 7a01 	vstr	s14, [r0, #4]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80001f0:	b119      	cbz	r1, 80001fa <arm_pid_init_f32+0x32>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80001f2:	2300      	movs	r3, #0
 80001f4:	60c3      	str	r3, [r0, #12]
 80001f6:	6103      	str	r3, [r0, #16]
 80001f8:	6143      	str	r3, [r0, #20]
 80001fa:	4770      	bx	lr

080001fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <HAL_InitTick+0x3c>)
 8000200:	4b0e      	ldr	r3, [pc, #56]	; (800023c <HAL_InitTick+0x40>)
{
 8000202:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000204:	7818      	ldrb	r0, [r3, #0]
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f0 	udiv	r3, r3, r0
 800020e:	6810      	ldr	r0, [r2, #0]
 8000210:	fbb0 f0f3 	udiv	r0, r0, r3
 8000214:	f000 f880 	bl	8000318 <HAL_SYSTICK_Config>
 8000218:	4604      	mov	r4, r0
 800021a:	b958      	cbnz	r0, 8000234 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800021c:	2d0f      	cmp	r5, #15
 800021e:	d809      	bhi.n	8000234 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000220:	4602      	mov	r2, r0
 8000222:	4629      	mov	r1, r5
 8000224:	f04f 30ff 	mov.w	r0, #4294967295
 8000228:	f000 f842 	bl	80002b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <HAL_InitTick+0x44>)
 800022e:	4620      	mov	r0, r4
 8000230:	601d      	str	r5, [r3, #0]
 8000232:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000234:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000236:	bd38      	pop	{r3, r4, r5, pc}
 8000238:	20000008 	.word	0x20000008
 800023c:	20000000 	.word	0x20000000
 8000240:	20000004 	.word	0x20000004

08000244 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <HAL_Init+0x20>)
{
 8000246:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000250:	2003      	movs	r0, #3
 8000252:	f000 f81b 	bl	800028c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000256:	2000      	movs	r0, #0
 8000258:	f7ff ffd0 	bl	80001fc <HAL_InitTick>
  HAL_MspInit();
 800025c:	f001 fcaa 	bl	8001bb4 <HAL_MspInit>
}
 8000260:	2000      	movs	r0, #0
 8000262:	bd08      	pop	{r3, pc}
 8000264:	40022000 	.word	0x40022000

08000268 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <HAL_IncTick+0x10>)
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <HAL_IncTick+0x14>)
 800026c:	6811      	ldr	r1, [r2, #0]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	440b      	add	r3, r1
 8000272:	6013      	str	r3, [r2, #0]
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000044 	.word	0x20000044
 800027c:	20000000 	.word	0x20000000

08000280 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000280:	4b01      	ldr	r3, [pc, #4]	; (8000288 <HAL_GetTick+0x8>)
 8000282:	6818      	ldr	r0, [r3, #0]
}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	20000044 	.word	0x20000044

0800028c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800028c:	4a07      	ldr	r2, [pc, #28]	; (80002ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800028e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000290:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000294:	041b      	lsls	r3, r3, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800029c:	0200      	lsls	r0, r0, #8
 800029e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80002a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002a8:	60d3      	str	r3, [r2, #12]
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002b2:	b530      	push	{r4, r5, lr}
 80002b4:	68dc      	ldr	r4, [r3, #12]
 80002b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c0:	2b04      	cmp	r3, #4
 80002c2:	bf28      	it	cs
 80002c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c8:	f04f 0501 	mov.w	r5, #1
 80002cc:	fa05 f303 	lsl.w	r3, r5, r3
 80002d0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d4:	bf8c      	ite	hi
 80002d6:	3c03      	subhi	r4, #3
 80002d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002da:	4019      	ands	r1, r3
 80002dc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002de:	fa05 f404 	lsl.w	r4, r5, r4
 80002e2:	3c01      	subs	r4, #1
 80002e4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e8:	ea42 0201 	orr.w	r2, r2, r1
 80002ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	bfaf      	iteee	ge
 80002f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	f000 000f 	andlt.w	r0, r0, #15
 80002fa:	4b06      	ldrlt	r3, [pc, #24]	; (8000314 <HAL_NVIC_SetPriority+0x64>)
 80002fc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	bfa5      	ittet	ge
 8000300:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000304:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800030c:	bd30      	pop	{r4, r5, pc}
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00
 8000314:	e000ed14 	.word	0xe000ed14

08000318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	3801      	subs	r0, #1
 800031a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800031e:	d20a      	bcs.n	8000336 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	4a07      	ldr	r2, [pc, #28]	; (8000340 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	21f0      	movs	r1, #240	; 0xf0
 8000328:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800032c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000336:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e010 	.word	0xe000e010
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000348:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800034c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80004b4 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000350:	4a56      	ldr	r2, [pc, #344]	; (80004ac <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000352:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000354:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000358:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035a:	9c01      	ldr	r4, [sp, #4]
 800035c:	40dc      	lsrs	r4, r3
 800035e:	d102      	bne.n	8000366 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000360:	b005      	add	sp, #20
 8000362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000366:	2401      	movs	r4, #1
 8000368:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800036c:	9c01      	ldr	r4, [sp, #4]
 800036e:	ea14 050a 	ands.w	r5, r4, sl
 8000372:	f000 8093 	beq.w	800049c <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000376:	684c      	ldr	r4, [r1, #4]
 8000378:	f024 0b10 	bic.w	fp, r4, #16
 800037c:	f1bb 0f02 	cmp.w	fp, #2
 8000380:	d111      	bne.n	80003a6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000382:	08df      	lsrs	r7, r3, #3
 8000384:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000388:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800038c:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800038e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000392:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000396:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800039a:	690e      	ldr	r6, [r1, #16]
 800039c:	fa06 f60e 	lsl.w	r6, r6, lr
 80003a0:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80003a4:	623e      	str	r6, [r7, #32]
 80003a6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003aa:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80003ac:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003ae:	fa07 f70c 	lsl.w	r7, r7, ip
 80003b2:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003b8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ba:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003be:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003c2:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c6:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003ca:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003cc:	d811      	bhi.n	80003f2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003ce:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003d0:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003d4:	68ce      	ldr	r6, [r1, #12]
 80003d6:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003da:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003de:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003e0:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003e2:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e6:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003ea:	409e      	lsls	r6, r3
 80003ec:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003f0:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003f2:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003f4:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003f6:	688e      	ldr	r6, [r1, #8]
 80003f8:	fa06 f60c 	lsl.w	r6, r6, ip
 80003fc:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003fe:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000400:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000402:	d54b      	bpl.n	800049c <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000408:	f046 0601 	orr.w	r6, r6, #1
 800040c:	f8c8 6018 	str.w	r6, [r8, #24]
 8000410:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000414:	f023 0703 	bic.w	r7, r3, #3
 8000418:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800041c:	f006 0601 	and.w	r6, r6, #1
 8000420:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000424:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000426:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800042c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800042e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000432:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000436:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800043a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800043e:	d02f      	beq.n	80004a0 <HAL_GPIO_Init+0x15c>
 8000440:	4e1b      	ldr	r6, [pc, #108]	; (80004b0 <HAL_GPIO_Init+0x16c>)
 8000442:	42b0      	cmp	r0, r6
 8000444:	d02e      	beq.n	80004a4 <HAL_GPIO_Init+0x160>
 8000446:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800044a:	42b0      	cmp	r0, r6
 800044c:	d02c      	beq.n	80004a8 <HAL_GPIO_Init+0x164>
 800044e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000452:	42b0      	cmp	r0, r6
 8000454:	bf14      	ite	ne
 8000456:	2605      	movne	r6, #5
 8000458:	2603      	moveq	r6, #3
 800045a:	fa06 f60e 	lsl.w	r6, r6, lr
 800045e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000462:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000464:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000466:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000468:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800046c:	bf0c      	ite	eq
 800046e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000470:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000472:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000474:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000476:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800047a:	bf0c      	ite	eq
 800047c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800047e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000480:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000482:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000484:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000488:	bf0c      	ite	eq
 800048a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800048c:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800048e:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000490:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000492:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000494:	bf54      	ite	pl
 8000496:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000498:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800049a:	60d6      	str	r6, [r2, #12]
    position++;
 800049c:	3301      	adds	r3, #1
 800049e:	e75c      	b.n	800035a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004a0:	2600      	movs	r6, #0
 80004a2:	e7da      	b.n	800045a <HAL_GPIO_Init+0x116>
 80004a4:	2601      	movs	r6, #1
 80004a6:	e7d8      	b.n	800045a <HAL_GPIO_Init+0x116>
 80004a8:	2602      	movs	r6, #2
 80004aa:	e7d6      	b.n	800045a <HAL_GPIO_Init+0x116>
 80004ac:	40010400 	.word	0x40010400
 80004b0:	48000400 	.word	0x48000400
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004bc:	4605      	mov	r5, r0
 80004be:	b918      	cbnz	r0, 80004c8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80004c0:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80004c2:	b002      	add	sp, #8
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c8:	6803      	ldr	r3, [r0, #0]
 80004ca:	07da      	lsls	r2, r3, #31
 80004cc:	d411      	bmi.n	80004f2 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004ce:	682b      	ldr	r3, [r5, #0]
 80004d0:	079b      	lsls	r3, r3, #30
 80004d2:	f100 8085 	bmi.w	80005e0 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004d6:	682b      	ldr	r3, [r5, #0]
 80004d8:	071c      	lsls	r4, r3, #28
 80004da:	f100 80f6 	bmi.w	80006ca <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004de:	682b      	ldr	r3, [r5, #0]
 80004e0:	0758      	lsls	r0, r3, #29
 80004e2:	f100 813f 	bmi.w	8000764 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004e6:	69ea      	ldr	r2, [r5, #28]
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	f040 81d6 	bne.w	800089a <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 80004ee:	2000      	movs	r0, #0
 80004f0:	e7e7      	b.n	80004c2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004f2:	4cba      	ldr	r4, [pc, #744]	; (80007dc <HAL_RCC_OscConfig+0x324>)
 80004f4:	6863      	ldr	r3, [r4, #4]
 80004f6:	f003 030c 	and.w	r3, r3, #12
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d007      	beq.n	800050e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004fe:	6863      	ldr	r3, [r4, #4]
 8000500:	f003 030c 	and.w	r3, r3, #12
 8000504:	2b08      	cmp	r3, #8
 8000506:	d116      	bne.n	8000536 <HAL_RCC_OscConfig+0x7e>
 8000508:	6863      	ldr	r3, [r4, #4]
 800050a:	03df      	lsls	r7, r3, #15
 800050c:	d513      	bpl.n	8000536 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800050e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000512:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000516:	6821      	ldr	r1, [r4, #0]
 8000518:	fa93 f3a3 	rbit	r3, r3
 800051c:	fab3 f383 	clz	r3, r3
 8000520:	f003 031f 	and.w	r3, r3, #31
 8000524:	2201      	movs	r2, #1
 8000526:	fa02 f303 	lsl.w	r3, r2, r3
 800052a:	420b      	tst	r3, r1
 800052c:	d0cf      	beq.n	80004ce <HAL_RCC_OscConfig+0x16>
 800052e:	686b      	ldr	r3, [r5, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1cc      	bne.n	80004ce <HAL_RCC_OscConfig+0x16>
 8000534:	e7c4      	b.n	80004c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000536:	686a      	ldr	r2, [r5, #4]
 8000538:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800053c:	d125      	bne.n	800058a <HAL_RCC_OscConfig+0xd2>
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000544:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000548:	68a9      	ldr	r1, [r5, #8]
 800054a:	f023 030f 	bic.w	r3, r3, #15
 800054e:	430b      	orrs	r3, r1
 8000550:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000552:	b352      	cbz	r2, 80005aa <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000554:	f7ff fe94 	bl	8000280 <HAL_GetTick>
 8000558:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800055c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800055e:	2701      	movs	r7, #1
 8000560:	fa96 f3a6 	rbit	r3, r6
 8000564:	6822      	ldr	r2, [r4, #0]
 8000566:	fa96 f3a6 	rbit	r3, r6
 800056a:	fab3 f383 	clz	r3, r3
 800056e:	f003 031f 	and.w	r3, r3, #31
 8000572:	fa07 f303 	lsl.w	r3, r7, r3
 8000576:	4213      	tst	r3, r2
 8000578:	d1a9      	bne.n	80004ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800057a:	f7ff fe81 	bl	8000280 <HAL_GetTick>
 800057e:	eba0 0008 	sub.w	r0, r0, r8
 8000582:	2864      	cmp	r0, #100	; 0x64
 8000584:	d9ec      	bls.n	8000560 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000586:	2003      	movs	r0, #3
 8000588:	e79b      	b.n	80004c2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	b932      	cbnz	r2, 800059c <HAL_RCC_OscConfig+0xe4>
 800058e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000592:	6023      	str	r3, [r4, #0]
 8000594:	6823      	ldr	r3, [r4, #0]
 8000596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800059a:	e7d3      	b.n	8000544 <HAL_RCC_OscConfig+0x8c>
 800059c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005a0:	d1f5      	bne.n	800058e <HAL_RCC_OscConfig+0xd6>
 80005a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a6:	6023      	str	r3, [r4, #0]
 80005a8:	e7c9      	b.n	800053e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80005aa:	f7ff fe69 	bl	8000280 <HAL_GetTick>
 80005ae:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005b2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005b4:	2701      	movs	r7, #1
 80005b6:	fa96 f3a6 	rbit	r3, r6
 80005ba:	6822      	ldr	r2, [r4, #0]
 80005bc:	fa96 f3a6 	rbit	r3, r6
 80005c0:	fab3 f383 	clz	r3, r3
 80005c4:	f003 031f 	and.w	r3, r3, #31
 80005c8:	fa07 f303 	lsl.w	r3, r7, r3
 80005cc:	4213      	tst	r3, r2
 80005ce:	f43f af7e 	beq.w	80004ce <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005d2:	f7ff fe55 	bl	8000280 <HAL_GetTick>
 80005d6:	eba0 0008 	sub.w	r0, r0, r8
 80005da:	2864      	cmp	r0, #100	; 0x64
 80005dc:	d9eb      	bls.n	80005b6 <HAL_RCC_OscConfig+0xfe>
 80005de:	e7d2      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005e0:	4c7e      	ldr	r4, [pc, #504]	; (80007dc <HAL_RCC_OscConfig+0x324>)
 80005e2:	6863      	ldr	r3, [r4, #4]
 80005e4:	f013 0f0c 	tst.w	r3, #12
 80005e8:	d007      	beq.n	80005fa <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005ea:	6863      	ldr	r3, [r4, #4]
 80005ec:	f003 030c 	and.w	r3, r3, #12
 80005f0:	2b08      	cmp	r3, #8
 80005f2:	d122      	bne.n	800063a <HAL_RCC_OscConfig+0x182>
 80005f4:	6863      	ldr	r3, [r4, #4]
 80005f6:	03de      	lsls	r6, r3, #15
 80005f8:	d41f      	bmi.n	800063a <HAL_RCC_OscConfig+0x182>
 80005fa:	2302      	movs	r3, #2
 80005fc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000600:	6821      	ldr	r1, [r4, #0]
 8000602:	fa93 f3a3 	rbit	r3, r3
 8000606:	fab3 f383 	clz	r3, r3
 800060a:	f003 031f 	and.w	r3, r3, #31
 800060e:	2201      	movs	r2, #1
 8000610:	fa02 f303 	lsl.w	r3, r2, r3
 8000614:	420b      	tst	r3, r1
 8000616:	d003      	beq.n	8000620 <HAL_RCC_OscConfig+0x168>
 8000618:	692b      	ldr	r3, [r5, #16]
 800061a:	4293      	cmp	r3, r2
 800061c:	f47f af50 	bne.w	80004c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000620:	6821      	ldr	r1, [r4, #0]
 8000622:	23f8      	movs	r3, #248	; 0xf8
 8000624:	fa93 f3a3 	rbit	r3, r3
 8000628:	fab3 f283 	clz	r2, r3
 800062c:	696b      	ldr	r3, [r5, #20]
 800062e:	4093      	lsls	r3, r2
 8000630:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000634:	4313      	orrs	r3, r2
 8000636:	6023      	str	r3, [r4, #0]
 8000638:	e74d      	b.n	80004d6 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800063a:	692a      	ldr	r2, [r5, #16]
 800063c:	2601      	movs	r6, #1
 800063e:	b30a      	cbz	r2, 8000684 <HAL_RCC_OscConfig+0x1cc>
 8000640:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000644:	fab3 f383 	clz	r3, r3
 8000648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800064c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	2702      	movs	r7, #2
 8000654:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000656:	f7ff fe13 	bl	8000280 <HAL_GetTick>
 800065a:	4680      	mov	r8, r0
 800065c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000660:	6822      	ldr	r2, [r4, #0]
 8000662:	fa97 f3a7 	rbit	r3, r7
 8000666:	fab3 f383 	clz	r3, r3
 800066a:	f003 031f 	and.w	r3, r3, #31
 800066e:	fa06 f303 	lsl.w	r3, r6, r3
 8000672:	4213      	tst	r3, r2
 8000674:	d1d4      	bne.n	8000620 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000676:	f7ff fe03 	bl	8000280 <HAL_GetTick>
 800067a:	eba0 0008 	sub.w	r0, r0, r8
 800067e:	2802      	cmp	r0, #2
 8000680:	d9ec      	bls.n	800065c <HAL_RCC_OscConfig+0x1a4>
 8000682:	e780      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
 8000684:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000688:	fab3 f383 	clz	r3, r3
 800068c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	2702      	movs	r7, #2
 8000698:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800069a:	f7ff fdf1 	bl	8000280 <HAL_GetTick>
 800069e:	4680      	mov	r8, r0
 80006a0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a4:	6822      	ldr	r2, [r4, #0]
 80006a6:	fa97 f3a7 	rbit	r3, r7
 80006aa:	fab3 f383 	clz	r3, r3
 80006ae:	f003 031f 	and.w	r3, r3, #31
 80006b2:	fa06 f303 	lsl.w	r3, r6, r3
 80006b6:	4213      	tst	r3, r2
 80006b8:	f43f af0d 	beq.w	80004d6 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006bc:	f7ff fde0 	bl	8000280 <HAL_GetTick>
 80006c0:	eba0 0008 	sub.w	r0, r0, r8
 80006c4:	2802      	cmp	r0, #2
 80006c6:	d9eb      	bls.n	80006a0 <HAL_RCC_OscConfig+0x1e8>
 80006c8:	e75d      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006ca:	69aa      	ldr	r2, [r5, #24]
 80006cc:	4e43      	ldr	r6, [pc, #268]	; (80007dc <HAL_RCC_OscConfig+0x324>)
 80006ce:	4944      	ldr	r1, [pc, #272]	; (80007e0 <HAL_RCC_OscConfig+0x328>)
 80006d0:	2401      	movs	r4, #1
 80006d2:	b31a      	cbz	r2, 800071c <HAL_RCC_OscConfig+0x264>
 80006d4:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006d8:	fab3 f383 	clz	r3, r3
 80006dc:	440b      	add	r3, r1
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	2702      	movs	r7, #2
 80006e2:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80006e4:	f7ff fdcc 	bl	8000280 <HAL_GetTick>
 80006e8:	4680      	mov	r8, r0
 80006ea:	fa97 f3a7 	rbit	r3, r7
 80006ee:	fa97 f3a7 	rbit	r3, r7
 80006f2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006f6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80006f8:	fa97 f3a7 	rbit	r3, r7
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	f003 031f 	and.w	r3, r3, #31
 8000704:	fa04 f303 	lsl.w	r3, r4, r3
 8000708:	4213      	tst	r3, r2
 800070a:	f47f aee8 	bne.w	80004de <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800070e:	f7ff fdb7 	bl	8000280 <HAL_GetTick>
 8000712:	eba0 0008 	sub.w	r0, r0, r8
 8000716:	2802      	cmp	r0, #2
 8000718:	d9e7      	bls.n	80006ea <HAL_RCC_OscConfig+0x232>
 800071a:	e734      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
 800071c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000720:	fab3 f383 	clz	r3, r3
 8000724:	440b      	add	r3, r1
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	2702      	movs	r7, #2
 800072a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800072c:	f7ff fda8 	bl	8000280 <HAL_GetTick>
 8000730:	4680      	mov	r8, r0
 8000732:	fa97 f3a7 	rbit	r3, r7
 8000736:	fa97 f3a7 	rbit	r3, r7
 800073a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800073e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000740:	fa97 f3a7 	rbit	r3, r7
 8000744:	fab3 f383 	clz	r3, r3
 8000748:	f003 031f 	and.w	r3, r3, #31
 800074c:	fa04 f303 	lsl.w	r3, r4, r3
 8000750:	4213      	tst	r3, r2
 8000752:	f43f aec4 	beq.w	80004de <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000756:	f7ff fd93 	bl	8000280 <HAL_GetTick>
 800075a:	eba0 0008 	sub.w	r0, r0, r8
 800075e:	2802      	cmp	r0, #2
 8000760:	d9e7      	bls.n	8000732 <HAL_RCC_OscConfig+0x27a>
 8000762:	e710      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000764:	4c1d      	ldr	r4, [pc, #116]	; (80007dc <HAL_RCC_OscConfig+0x324>)
 8000766:	69e3      	ldr	r3, [r4, #28]
 8000768:	00d9      	lsls	r1, r3, #3
 800076a:	d434      	bmi.n	80007d6 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	69e3      	ldr	r3, [r4, #28]
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	61e3      	str	r3, [r4, #28]
 8000774:	69e3      	ldr	r3, [r4, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800077e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000780:	4f18      	ldr	r7, [pc, #96]	; (80007e4 <HAL_RCC_OscConfig+0x32c>)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	05da      	lsls	r2, r3, #23
 8000786:	d52f      	bpl.n	80007e8 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000788:	68eb      	ldr	r3, [r5, #12]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d13d      	bne.n	800080a <HAL_RCC_OscConfig+0x352>
 800078e:	6a23      	ldr	r3, [r4, #32]
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000796:	f7ff fd73 	bl	8000280 <HAL_GetTick>
 800079a:	2702      	movs	r7, #2
 800079c:	4682      	mov	sl, r0
 800079e:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007a0:	f04f 0801 	mov.w	r8, #1
 80007a4:	fa97 f3a7 	rbit	r3, r7
 80007a8:	fa97 f3a7 	rbit	r3, r7
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d06c      	beq.n	800088a <HAL_RCC_OscConfig+0x3d2>
 80007b0:	6a22      	ldr	r2, [r4, #32]
 80007b2:	fa99 f3a9 	rbit	r3, r9
 80007b6:	fab3 f383 	clz	r3, r3
 80007ba:	f003 031f 	and.w	r3, r3, #31
 80007be:	fa08 f303 	lsl.w	r3, r8, r3
 80007c2:	4213      	tst	r3, r2
 80007c4:	d058      	beq.n	8000878 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80007c6:	2e00      	cmp	r6, #0
 80007c8:	f43f ae8d 	beq.w	80004e6 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007cc:	69e3      	ldr	r3, [r4, #28]
 80007ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007d2:	61e3      	str	r3, [r4, #28]
 80007d4:	e687      	b.n	80004e6 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80007d6:	2600      	movs	r6, #0
 80007d8:	e7d2      	b.n	8000780 <HAL_RCC_OscConfig+0x2c8>
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	10908120 	.word	0x10908120
 80007e4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80007f0:	f7ff fd46 	bl	8000280 <HAL_GetTick>
 80007f4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	d4c5      	bmi.n	8000788 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007fc:	f7ff fd40 	bl	8000280 <HAL_GetTick>
 8000800:	eba0 0008 	sub.w	r0, r0, r8
 8000804:	2864      	cmp	r0, #100	; 0x64
 8000806:	d9f6      	bls.n	80007f6 <HAL_RCC_OscConfig+0x33e>
 8000808:	e6bd      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800080a:	bb3b      	cbnz	r3, 800085c <HAL_RCC_OscConfig+0x3a4>
 800080c:	6a23      	ldr	r3, [r4, #32]
 800080e:	f023 0301 	bic.w	r3, r3, #1
 8000812:	6223      	str	r3, [r4, #32]
 8000814:	6a23      	ldr	r3, [r4, #32]
 8000816:	f023 0304 	bic.w	r3, r3, #4
 800081a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800081c:	f7ff fd30 	bl	8000280 <HAL_GetTick>
 8000820:	2702      	movs	r7, #2
 8000822:	4682      	mov	sl, r0
 8000824:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000826:	f04f 0801 	mov.w	r8, #1
 800082a:	fa97 f3a7 	rbit	r3, r7
 800082e:	fa97 f3a7 	rbit	r3, r7
 8000832:	b373      	cbz	r3, 8000892 <HAL_RCC_OscConfig+0x3da>
 8000834:	6a22      	ldr	r2, [r4, #32]
 8000836:	fa99 f3a9 	rbit	r3, r9
 800083a:	fab3 f383 	clz	r3, r3
 800083e:	f003 031f 	and.w	r3, r3, #31
 8000842:	fa08 f303 	lsl.w	r3, r8, r3
 8000846:	4213      	tst	r3, r2
 8000848:	d0bd      	beq.n	80007c6 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800084a:	f7ff fd19 	bl	8000280 <HAL_GetTick>
 800084e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000852:	eba0 000a 	sub.w	r0, r0, sl
 8000856:	4298      	cmp	r0, r3
 8000858:	d9e7      	bls.n	800082a <HAL_RCC_OscConfig+0x372>
 800085a:	e694      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800085c:	2b05      	cmp	r3, #5
 800085e:	6a23      	ldr	r3, [r4, #32]
 8000860:	d103      	bne.n	800086a <HAL_RCC_OscConfig+0x3b2>
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6223      	str	r3, [r4, #32]
 8000868:	e791      	b.n	800078e <HAL_RCC_OscConfig+0x2d6>
 800086a:	f023 0301 	bic.w	r3, r3, #1
 800086e:	6223      	str	r3, [r4, #32]
 8000870:	6a23      	ldr	r3, [r4, #32]
 8000872:	f023 0304 	bic.w	r3, r3, #4
 8000876:	e78d      	b.n	8000794 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000878:	f7ff fd02 	bl	8000280 <HAL_GetTick>
 800087c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000880:	eba0 000a 	sub.w	r0, r0, sl
 8000884:	4298      	cmp	r0, r3
 8000886:	d98d      	bls.n	80007a4 <HAL_RCC_OscConfig+0x2ec>
 8000888:	e67d      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
 800088a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800088e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000890:	e78f      	b.n	80007b2 <HAL_RCC_OscConfig+0x2fa>
 8000892:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000896:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000898:	e7cd      	b.n	8000836 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800089a:	4c41      	ldr	r4, [pc, #260]	; (80009a0 <HAL_RCC_OscConfig+0x4e8>)
 800089c:	6863      	ldr	r3, [r4, #4]
 800089e:	f003 030c 	and.w	r3, r3, #12
 80008a2:	2b08      	cmp	r3, #8
 80008a4:	f43f ae0c 	beq.w	80004c0 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008a8:	2a02      	cmp	r2, #2
 80008aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ae:	d152      	bne.n	8000956 <HAL_RCC_OscConfig+0x49e>
 80008b0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008b4:	fab3 f383 	clz	r3, r3
 80008b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008c6:	f7ff fcdb 	bl	8000280 <HAL_GetTick>
 80008ca:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008ce:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008d0:	2601      	movs	r6, #1
 80008d2:	fa97 f3a7 	rbit	r3, r7
 80008d6:	6822      	ldr	r2, [r4, #0]
 80008d8:	fa97 f3a7 	rbit	r3, r7
 80008dc:	fab3 f383 	clz	r3, r3
 80008e0:	f003 031f 	and.w	r3, r3, #31
 80008e4:	fa06 f303 	lsl.w	r3, r6, r3
 80008e8:	4213      	tst	r3, r2
 80008ea:	d12d      	bne.n	8000948 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008ec:	6862      	ldr	r2, [r4, #4]
 80008ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008f0:	6a29      	ldr	r1, [r5, #32]
 80008f2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80008f6:	430b      	orrs	r3, r1
 80008f8:	4313      	orrs	r3, r2
 80008fa:	6063      	str	r3, [r4, #4]
 80008fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000900:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000904:	fab3 f383 	clz	r3, r3
 8000908:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800090c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000916:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000918:	f7ff fcb2 	bl	8000280 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800091c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800091e:	4607      	mov	r7, r0
 8000920:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000924:	6822      	ldr	r2, [r4, #0]
 8000926:	fa95 f3a5 	rbit	r3, r5
 800092a:	fab3 f383 	clz	r3, r3
 800092e:	f003 031f 	and.w	r3, r3, #31
 8000932:	fa06 f303 	lsl.w	r3, r6, r3
 8000936:	4213      	tst	r3, r2
 8000938:	f47f add9 	bne.w	80004ee <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800093c:	f7ff fca0 	bl	8000280 <HAL_GetTick>
 8000940:	1bc0      	subs	r0, r0, r7
 8000942:	2802      	cmp	r0, #2
 8000944:	d9ec      	bls.n	8000920 <HAL_RCC_OscConfig+0x468>
 8000946:	e61e      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000948:	f7ff fc9a 	bl	8000280 <HAL_GetTick>
 800094c:	eba0 0008 	sub.w	r0, r0, r8
 8000950:	2802      	cmp	r0, #2
 8000952:	d9be      	bls.n	80008d2 <HAL_RCC_OscConfig+0x41a>
 8000954:	e617      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
 8000956:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800095a:	fab3 f383 	clz	r3, r3
 800095e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000962:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800096c:	f7ff fc88 	bl	8000280 <HAL_GetTick>
 8000970:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000974:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000976:	2601      	movs	r6, #1
 8000978:	fa95 f3a5 	rbit	r3, r5
 800097c:	6822      	ldr	r2, [r4, #0]
 800097e:	fa95 f3a5 	rbit	r3, r5
 8000982:	fab3 f383 	clz	r3, r3
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	fa06 f303 	lsl.w	r3, r6, r3
 800098e:	4213      	tst	r3, r2
 8000990:	f43f adad 	beq.w	80004ee <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000994:	f7ff fc74 	bl	8000280 <HAL_GetTick>
 8000998:	1bc0      	subs	r0, r0, r7
 800099a:	2802      	cmp	r0, #2
 800099c:	d9ec      	bls.n	8000978 <HAL_RCC_OscConfig+0x4c0>
 800099e:	e5f2      	b.n	8000586 <HAL_RCC_OscConfig+0xce>
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009a4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009a6:	4c13      	ldr	r4, [pc, #76]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80009a8:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009aa:	f001 030c 	and.w	r3, r1, #12
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d11e      	bne.n	80009f0 <HAL_RCC_GetSysClockFreq+0x4c>
 80009b2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009b6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009ba:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009be:	fab3 f383 	clz	r3, r3
 80009c2:	fa22 f303 	lsr.w	r3, r2, r3
 80009c6:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80009c8:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa92 f2a2 	rbit	r2, r2
 80009d2:	fab2 f282 	clz	r2, r2
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	40d3      	lsrs	r3, r2
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_RCC_GetSysClockFreq+0x58>)
 80009de:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80009e0:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009e2:	bf4a      	itet	mi
 80009e4:	4b06      	ldrmi	r3, [pc, #24]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009e6:	4b07      	ldrpl	r3, [pc, #28]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009e8:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009ec:	4358      	muls	r0, r3
 80009ee:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009f2:	bd10      	pop	{r4, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	08001ef4 	.word	0x08001ef4
 80009fc:	08001f04 	.word	0x08001f04
 8000a00:	007a1200 	.word	0x007a1200
 8000a04:	003d0900 	.word	0x003d0900

08000a08 <HAL_RCC_ClockConfig>:
{
 8000a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a0c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a0e:	4604      	mov	r4, r0
 8000a10:	b910      	cbnz	r0, 8000a18 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
 8000a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a18:	4a4c      	ldr	r2, [pc, #304]	; (8000b4c <HAL_RCC_ClockConfig+0x144>)
 8000a1a:	6813      	ldr	r3, [r2, #0]
 8000a1c:	f003 0307 	and.w	r3, r3, #7
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d32e      	bcc.n	8000a82 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a24:	6822      	ldr	r2, [r4, #0]
 8000a26:	0791      	lsls	r1, r2, #30
 8000a28:	d436      	bmi.n	8000a98 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a2a:	07d2      	lsls	r2, r2, #31
 8000a2c:	d43c      	bmi.n	8000aa8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a2e:	4a47      	ldr	r2, [pc, #284]	; (8000b4c <HAL_RCC_ClockConfig+0x144>)
 8000a30:	6813      	ldr	r3, [r2, #0]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	429d      	cmp	r5, r3
 8000a38:	d375      	bcc.n	8000b26 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a3a:	6822      	ldr	r2, [r4, #0]
 8000a3c:	4d44      	ldr	r5, [pc, #272]	; (8000b50 <HAL_RCC_ClockConfig+0x148>)
 8000a3e:	f012 0f04 	tst.w	r2, #4
 8000a42:	d17c      	bne.n	8000b3e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a44:	0713      	lsls	r3, r2, #28
 8000a46:	d506      	bpl.n	8000a56 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a48:	686b      	ldr	r3, [r5, #4]
 8000a4a:	6922      	ldr	r2, [r4, #16]
 8000a4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a54:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a56:	f7ff ffa5 	bl	80009a4 <HAL_RCC_GetSysClockFreq>
 8000a5a:	686b      	ldr	r3, [r5, #4]
 8000a5c:	22f0      	movs	r2, #240	; 0xf0
 8000a5e:	fa92 f2a2 	rbit	r2, r2
 8000a62:	fab2 f282 	clz	r2, r2
 8000a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a6a:	40d3      	lsrs	r3, r2
 8000a6c:	4a39      	ldr	r2, [pc, #228]	; (8000b54 <HAL_RCC_ClockConfig+0x14c>)
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	40d8      	lsrs	r0, r3
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <HAL_RCC_ClockConfig+0x150>)
 8000a74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fbc0 	bl	80001fc <HAL_InitTick>
  return HAL_OK;
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a82:	6813      	ldr	r3, [r2, #0]
 8000a84:	f023 0307 	bic.w	r3, r3, #7
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a8c:	6813      	ldr	r3, [r2, #0]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	4299      	cmp	r1, r3
 8000a94:	d1bd      	bne.n	8000a12 <HAL_RCC_ClockConfig+0xa>
 8000a96:	e7c5      	b.n	8000a24 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a98:	492d      	ldr	r1, [pc, #180]	; (8000b50 <HAL_RCC_ClockConfig+0x148>)
 8000a9a:	68a0      	ldr	r0, [r4, #8]
 8000a9c:	684b      	ldr	r3, [r1, #4]
 8000a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aa2:	4303      	orrs	r3, r0
 8000aa4:	604b      	str	r3, [r1, #4]
 8000aa6:	e7c0      	b.n	8000a2a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aa8:	6862      	ldr	r2, [r4, #4]
 8000aaa:	4e29      	ldr	r6, [pc, #164]	; (8000b50 <HAL_RCC_ClockConfig+0x148>)
 8000aac:	2a01      	cmp	r2, #1
 8000aae:	d127      	bne.n	8000b00 <HAL_RCC_ClockConfig+0xf8>
 8000ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab8:	6831      	ldr	r1, [r6, #0]
 8000aba:	fa93 f3a3 	rbit	r3, r3
 8000abe:	fab3 f383 	clz	r3, r3
 8000ac2:	f003 031f 	and.w	r3, r3, #31
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000acc:	d0a1      	beq.n	8000a12 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ace:	6873      	ldr	r3, [r6, #4]
 8000ad0:	f023 0303 	bic.w	r3, r3, #3
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000ad8:	f7ff fbd2 	bl	8000280 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000adc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ae0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ae2:	6873      	ldr	r3, [r6, #4]
 8000ae4:	6862      	ldr	r2, [r4, #4]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000aee:	d09e      	beq.n	8000a2e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af0:	f7ff fbc6 	bl	8000280 <HAL_GetTick>
 8000af4:	1bc0      	subs	r0, r0, r7
 8000af6:	4540      	cmp	r0, r8
 8000af8:	d9f3      	bls.n	8000ae2 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000afa:	2003      	movs	r0, #3
}
 8000afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b00:	2a02      	cmp	r2, #2
 8000b02:	bf0c      	ite	eq
 8000b04:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b08:	2302      	movne	r3, #2
 8000b0a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b0e:	6830      	ldr	r0, [r6, #0]
 8000b10:	fa93 f3a3 	rbit	r3, r3
 8000b14:	fab3 f383 	clz	r3, r3
 8000b18:	f003 031f 	and.w	r3, r3, #31
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	4203      	tst	r3, r0
 8000b24:	e7d2      	b.n	8000acc <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b26:	6813      	ldr	r3, [r2, #0]
 8000b28:	f023 0307 	bic.w	r3, r3, #7
 8000b2c:	432b      	orrs	r3, r5
 8000b2e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b30:	6813      	ldr	r3, [r2, #0]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	429d      	cmp	r5, r3
 8000b38:	f47f af6b 	bne.w	8000a12 <HAL_RCC_ClockConfig+0xa>
 8000b3c:	e77d      	b.n	8000a3a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b3e:	686b      	ldr	r3, [r5, #4]
 8000b40:	68e1      	ldr	r1, [r4, #12]
 8000b42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b46:	430b      	orrs	r3, r1
 8000b48:	606b      	str	r3, [r5, #4]
 8000b4a:	e77b      	b.n	8000a44 <HAL_RCC_ClockConfig+0x3c>
 8000b4c:	40022000 	.word	0x40022000
 8000b50:	40021000 	.word	0x40021000
 8000b54:	08001f18 	.word	0x08001f18
 8000b58:	20000008 	.word	0x20000008

08000b5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	fa92 f2a2 	rbit	r2, r2
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b70:	40d3      	lsrs	r3, r2
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b74:	5cd3      	ldrb	r3, [r2, r3]
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b78:	6810      	ldr	r0, [r2, #0]
}    
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	08001f28 	.word	0x08001f28
 8000b88:	20000008 	.word	0x20000008

08000b8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b8e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	fa92 f2a2 	rbit	r2, r2
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000ba0:	40d3      	lsrs	r3, r2
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000ba4:	5cd3      	ldrb	r3, [r2, r3]
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000ba8:	6810      	ldr	r0, [r2, #0]
} 
 8000baa:	40d8      	lsrs	r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	08001f28 	.word	0x08001f28
 8000bb8:	20000008 	.word	0x20000008

08000bbc <HAL_TIM_PWM_MspInit>:
 8000bbc:	4770      	bx	lr
	...

08000bc0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8000bc2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bc4:	4290      	cmp	r0, r2
{
 8000bc6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bc8:	d005      	beq.n	8000bd6 <TIM_Base_SetConfig+0x16>
 8000bca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000bce:	d002      	beq.n	8000bd6 <TIM_Base_SetConfig+0x16>
 8000bd0:	4c1e      	ldr	r4, [pc, #120]	; (8000c4c <TIM_Base_SetConfig+0x8c>)
 8000bd2:	42a0      	cmp	r0, r4
 8000bd4:	d10c      	bne.n	8000bf0 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000bd6:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000bdc:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000bde:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000be2:	d010      	beq.n	8000c06 <TIM_Base_SetConfig+0x46>
 8000be4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000be8:	d00d      	beq.n	8000c06 <TIM_Base_SetConfig+0x46>
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <TIM_Base_SetConfig+0x8c>)
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d00a      	beq.n	8000c06 <TIM_Base_SetConfig+0x46>
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <TIM_Base_SetConfig+0x90>)
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	d007      	beq.n	8000c06 <TIM_Base_SetConfig+0x46>
 8000bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d003      	beq.n	8000c06 <TIM_Base_SetConfig+0x46>
 8000bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c02:	4290      	cmp	r0, r2
 8000c04:	d103      	bne.n	8000c0e <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c06:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c0c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000c0e:	694a      	ldr	r2, [r1, #20]
 8000c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c14:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000c16:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c18:	688b      	ldr	r3, [r1, #8]
 8000c1a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000c1c:	680b      	ldr	r3, [r1, #0]
 8000c1e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <TIM_Base_SetConfig+0x88>)
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d00b      	beq.n	8000c3e <TIM_Base_SetConfig+0x7e>
 8000c26:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000c2a:	4298      	cmp	r0, r3
 8000c2c:	d007      	beq.n	8000c3e <TIM_Base_SetConfig+0x7e>
 8000c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d003      	beq.n	8000c3e <TIM_Base_SetConfig+0x7e>
 8000c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d101      	bne.n	8000c42 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000c3e:	690b      	ldr	r3, [r1, #16]
 8000c40:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000c42:	2301      	movs	r3, #1
 8000c44:	6143      	str	r3, [r0, #20]
 8000c46:	bd10      	pop	{r4, pc}
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	40000400 	.word	0x40000400
 8000c50:	40014000 	.word	0x40014000

08000c54 <HAL_TIM_Base_Init>:
{ 
 8000c54:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000c56:	4604      	mov	r4, r0
 8000c58:	b1a0      	cbz	r0, 8000c84 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c62:	b91b      	cbnz	r3, 8000c6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000c68:	f000 fffe 	bl	8001c68 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000c72:	6820      	ldr	r0, [r4, #0]
 8000c74:	1d21      	adds	r1, r4, #4
 8000c76:	f7ff ffa3 	bl	8000bc0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000c80:	2000      	movs	r0, #0
 8000c82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c84:	2001      	movs	r0, #1
}
 8000c86:	bd10      	pop	{r4, pc}

08000c88 <HAL_TIM_PWM_Init>:
{
 8000c88:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	b1a0      	cbz	r0, 8000cb8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c96:	b91b      	cbnz	r3, 8000ca0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000c9c:	f7ff ff8e 	bl	8000bbc <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000ca6:	6820      	ldr	r0, [r4, #0]
 8000ca8:	1d21      	adds	r1, r4, #4
 8000caa:	f7ff ff89 	bl	8000bc0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000cb8:	2001      	movs	r0, #1
}
 8000cba:	bd10      	pop	{r4, pc}

08000cbc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cbc:	6a03      	ldr	r3, [r0, #32]
 8000cbe:	f023 0301 	bic.w	r3, r3, #1
 8000cc2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000cc4:	6a03      	ldr	r3, [r0, #32]
{
 8000cc6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000cc8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000cca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ccc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000cce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cd2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000cd6:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000cd8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000cda:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000cde:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000ce0:	4d17      	ldr	r5, [pc, #92]	; (8000d40 <TIM_OC1_SetConfig+0x84>)
 8000ce2:	42a8      	cmp	r0, r5
 8000ce4:	d00b      	beq.n	8000cfe <TIM_OC1_SetConfig+0x42>
 8000ce6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000cea:	42a8      	cmp	r0, r5
 8000cec:	d007      	beq.n	8000cfe <TIM_OC1_SetConfig+0x42>
 8000cee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cf2:	42a8      	cmp	r0, r5
 8000cf4:	d003      	beq.n	8000cfe <TIM_OC1_SetConfig+0x42>
 8000cf6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cfa:	42a8      	cmp	r0, r5
 8000cfc:	d11a      	bne.n	8000d34 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000cfe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000d00:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000d04:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000d06:	4d0e      	ldr	r5, [pc, #56]	; (8000d40 <TIM_OC1_SetConfig+0x84>)
 8000d08:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8000d0a:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000d0e:	d00b      	beq.n	8000d28 <TIM_OC1_SetConfig+0x6c>
 8000d10:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000d14:	42a8      	cmp	r0, r5
 8000d16:	d007      	beq.n	8000d28 <TIM_OC1_SetConfig+0x6c>
 8000d18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d1c:	42a8      	cmp	r0, r5
 8000d1e:	d003      	beq.n	8000d28 <TIM_OC1_SetConfig+0x6c>
 8000d20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d24:	42a8      	cmp	r0, r5
 8000d26:	d105      	bne.n	8000d34 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000d28:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d2c:	698e      	ldr	r6, [r1, #24]
 8000d2e:	694c      	ldr	r4, [r1, #20]
 8000d30:	4334      	orrs	r4, r6
 8000d32:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d34:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000d36:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000d38:	684a      	ldr	r2, [r1, #4]
 8000d3a:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000d3c:	6203      	str	r3, [r0, #32]
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
 8000d40:	40012c00 	.word	0x40012c00

08000d44 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d44:	6a03      	ldr	r3, [r0, #32]
 8000d46:	f023 0310 	bic.w	r3, r3, #16
 8000d4a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d4c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000d4e:	6842      	ldr	r2, [r0, #4]
{
 8000d50:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000d52:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000d56:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8000d5a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d5e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000d62:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000d64:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000d68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000d6c:	4d10      	ldr	r5, [pc, #64]	; (8000db0 <TIM_OC2_SetConfig+0x6c>)
 8000d6e:	42a8      	cmp	r0, r5
 8000d70:	d10e      	bne.n	8000d90 <TIM_OC2_SetConfig+0x4c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000d72:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000d78:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8000d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000d80:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000d82:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000d84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000d88:	4335      	orrs	r5, r6
 8000d8a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8000d8e:	e009      	b.n	8000da4 <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000d90:	4d08      	ldr	r5, [pc, #32]	; (8000db4 <TIM_OC2_SetConfig+0x70>)
 8000d92:	42a8      	cmp	r0, r5
 8000d94:	d0f4      	beq.n	8000d80 <TIM_OC2_SetConfig+0x3c>
 8000d96:	4d08      	ldr	r5, [pc, #32]	; (8000db8 <TIM_OC2_SetConfig+0x74>)
 8000d98:	42a8      	cmp	r0, r5
 8000d9a:	d0f1      	beq.n	8000d80 <TIM_OC2_SetConfig+0x3c>
 8000d9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000da0:	42a8      	cmp	r0, r5
 8000da2:	d0ed      	beq.n	8000d80 <TIM_OC2_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000da4:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8000da6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000da8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000daa:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000dac:	6203      	str	r3, [r0, #32]
}
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	40012c00 	.word	0x40012c00
 8000db4:	40014000 	.word	0x40014000
 8000db8:	40014400 	.word	0x40014400

08000dbc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000dbc:	6a03      	ldr	r3, [r0, #32]
 8000dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000dc4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000dc6:	6842      	ldr	r2, [r0, #4]
{
 8000dc8:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000dca:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000dcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000dce:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8000dd2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000dd6:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000dd8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000dda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000dde:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000de2:	4d11      	ldr	r5, [pc, #68]	; (8000e28 <TIM_OC3_SetConfig+0x6c>)
 8000de4:	42a8      	cmp	r0, r5
 8000de6:	d10e      	bne.n	8000e06 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000de8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000dee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000df2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000df6:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000df8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000dfa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000dfe:	4335      	orrs	r5, r6
 8000e00:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8000e04:	e009      	b.n	8000e1a <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000e06:	4d09      	ldr	r5, [pc, #36]	; (8000e2c <TIM_OC3_SetConfig+0x70>)
 8000e08:	42a8      	cmp	r0, r5
 8000e0a:	d0f4      	beq.n	8000df6 <TIM_OC3_SetConfig+0x3a>
 8000e0c:	4d08      	ldr	r5, [pc, #32]	; (8000e30 <TIM_OC3_SetConfig+0x74>)
 8000e0e:	42a8      	cmp	r0, r5
 8000e10:	d0f1      	beq.n	8000df6 <TIM_OC3_SetConfig+0x3a>
 8000e12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e16:	42a8      	cmp	r0, r5
 8000e18:	d0ed      	beq.n	8000df6 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e1a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e1c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000e1e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000e20:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000e22:	6203      	str	r3, [r0, #32]
}
 8000e24:	bd70      	pop	{r4, r5, r6, pc}
 8000e26:	bf00      	nop
 8000e28:	40012c00 	.word	0x40012c00
 8000e2c:	40014000 	.word	0x40014000
 8000e30:	40014400 	.word	0x40014400

08000e34 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e34:	6a03      	ldr	r3, [r0, #32]
 8000e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e3a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e3c:	6a02      	ldr	r2, [r0, #32]
{
 8000e3e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000e40:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e42:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e4a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e52:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e58:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000e5c:	4d0c      	ldr	r5, [pc, #48]	; (8000e90 <TIM_OC4_SetConfig+0x5c>)
 8000e5e:	42a8      	cmp	r0, r5
 8000e60:	d00b      	beq.n	8000e7a <TIM_OC4_SetConfig+0x46>
 8000e62:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000e66:	42a8      	cmp	r0, r5
 8000e68:	d007      	beq.n	8000e7a <TIM_OC4_SetConfig+0x46>
 8000e6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e6e:	42a8      	cmp	r0, r5
 8000e70:	d003      	beq.n	8000e7a <TIM_OC4_SetConfig+0x46>
 8000e72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e76:	42a8      	cmp	r0, r5
 8000e78:	d104      	bne.n	8000e84 <TIM_OC4_SetConfig+0x50>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e7a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000e7c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e80:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e84:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e86:	61c3      	str	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000e88:	684b      	ldr	r3, [r1, #4]
 8000e8a:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000e8c:	6202      	str	r2, [r0, #32]
 8000e8e:	bd30      	pop	{r4, r5, pc}
 8000e90:	40012c00 	.word	0x40012c00

08000e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000e94:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000e96:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e98:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e9a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e9e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000ea2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000ea4:	6083      	str	r3, [r0, #8]
 8000ea6:	bd10      	pop	{r4, pc}

08000ea8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000ea8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000eac:	2b01      	cmp	r3, #1
{
 8000eae:	b570      	push	{r4, r5, r6, lr}
 8000eb0:	4604      	mov	r4, r0
 8000eb2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000eb6:	d01a      	beq.n	8000eee <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8000eb8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000ebc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000ec4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ec6:	4b52      	ldr	r3, [pc, #328]	; (8001010 <HAL_TIM_ConfigClockSource+0x168>)
 8000ec8:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000eca:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000ecc:	680b      	ldr	r3, [r1, #0]
 8000ece:	2b40      	cmp	r3, #64	; 0x40
 8000ed0:	d075      	beq.n	8000fbe <HAL_TIM_ConfigClockSource+0x116>
 8000ed2:	d818      	bhi.n	8000f06 <HAL_TIM_ConfigClockSource+0x5e>
 8000ed4:	2b10      	cmp	r3, #16
 8000ed6:	f000 808f 	beq.w	8000ff8 <HAL_TIM_ConfigClockSource+0x150>
 8000eda:	d809      	bhi.n	8000ef0 <HAL_TIM_ConfigClockSource+0x48>
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 8085 	beq.w	8000fec <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8000ee2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000ee4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000ee6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000eea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000eee:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000ef0:	2b20      	cmp	r3, #32
 8000ef2:	f000 8087 	beq.w	8001004 <HAL_TIM_ConfigClockSource+0x15c>
 8000ef6:	2b30      	cmp	r3, #48	; 0x30
 8000ef8:	d1f3      	bne.n	8000ee2 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8000efa:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f00:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8000f04:	e033      	b.n	8000f6e <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8000f06:	2b70      	cmp	r3, #112	; 0x70
 8000f08:	d033      	beq.n	8000f72 <HAL_TIM_ConfigClockSource+0xca>
 8000f0a:	d81b      	bhi.n	8000f44 <HAL_TIM_ConfigClockSource+0x9c>
 8000f0c:	2b50      	cmp	r3, #80	; 0x50
 8000f0e:	d03f      	beq.n	8000f90 <HAL_TIM_ConfigClockSource+0xe8>
 8000f10:	2b60      	cmp	r3, #96	; 0x60
 8000f12:	d1e6      	bne.n	8000ee2 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000f14:	684d      	ldr	r5, [r1, #4]
 8000f16:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f18:	6a01      	ldr	r1, [r0, #32]
 8000f1a:	f021 0110 	bic.w	r1, r1, #16
 8000f1e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f20:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000f22:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f24:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f30:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000f34:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f36:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000f38:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f3e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8000f42:	e014      	b.n	8000f6e <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8000f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f48:	d00c      	beq.n	8000f64 <HAL_TIM_ConfigClockSource+0xbc>
 8000f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f4e:	d1c8      	bne.n	8000ee2 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8000f50:	68cb      	ldr	r3, [r1, #12]
 8000f52:	684a      	ldr	r2, [r1, #4]
 8000f54:	6889      	ldr	r1, [r1, #8]
 8000f56:	f7ff ff9d 	bl	8000e94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	6893      	ldr	r3, [r2, #8]
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f62:	e013      	b.n	8000f8c <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f64:	6883      	ldr	r3, [r0, #8]
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6a:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8000f6e:	6083      	str	r3, [r0, #8]
 8000f70:	e7b7      	b.n	8000ee2 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8000f72:	68cb      	ldr	r3, [r1, #12]
 8000f74:	684a      	ldr	r2, [r1, #4]
 8000f76:	6889      	ldr	r1, [r1, #8]
 8000f78:	f7ff ff8c 	bl	8000e94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f84:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f8c:	6093      	str	r3, [r2, #8]
    break;
 8000f8e:	e7a8      	b.n	8000ee2 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000f90:	684a      	ldr	r2, [r1, #4]
 8000f92:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f94:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f96:	6a05      	ldr	r5, [r0, #32]
 8000f98:	f025 0501 	bic.w	r5, r5, #1
 8000f9c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f9e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fa0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fa8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000fac:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000fae:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000fb0:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000fb2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fb8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8000fbc:	e7d7      	b.n	8000f6e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000fbe:	684a      	ldr	r2, [r1, #4]
 8000fc0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000fc2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fc4:	6a05      	ldr	r5, [r0, #32]
 8000fc6:	f025 0501 	bic.w	r5, r5, #1
 8000fca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000fcc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fce:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fd6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000fda:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000fdc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000fde:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000fe0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fe6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000fea:	e7c0      	b.n	8000f6e <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000fec:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ff2:	f043 0307 	orr.w	r3, r3, #7
 8000ff6:	e7ba      	b.n	8000f6e <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000ff8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ffe:	f043 0317 	orr.w	r3, r3, #23
 8001002:	e7b4      	b.n	8000f6e <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001004:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800100a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800100e:	e7ae      	b.n	8000f6e <HAL_TIM_ConfigClockSource+0xc6>
 8001010:	fffe0088 	.word	0xfffe0088

08001014 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001014:	6a03      	ldr	r3, [r0, #32]
{
 8001016:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001018:	2401      	movs	r4, #1
 800101a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800101c:	ea23 0304 	bic.w	r3, r3, r4
 8001020:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001022:	6a03      	ldr	r3, [r0, #32]
 8001024:	408a      	lsls	r2, r1
 8001026:	431a      	orrs	r2, r3
 8001028:	6202      	str	r2, [r0, #32]
 800102a:	bd10      	pop	{r4, pc}

0800102c <HAL_TIM_PWM_Start>:
{
 800102c:	b510      	push	{r4, lr}
 800102e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001030:	2201      	movs	r2, #1
 8001032:	6800      	ldr	r0, [r0, #0]
 8001034:	f7ff ffee 	bl	8001014 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_TIM_PWM_Start+0x40>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d00b      	beq.n	8001058 <HAL_TIM_PWM_Start+0x2c>
 8001040:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001044:	4293      	cmp	r3, r2
 8001046:	d007      	beq.n	8001058 <HAL_TIM_PWM_Start+0x2c>
 8001048:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800104c:	4293      	cmp	r3, r2
 800104e:	d003      	beq.n	8001058 <HAL_TIM_PWM_Start+0x2c>
 8001050:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001054:	4293      	cmp	r3, r2
 8001056:	d103      	bne.n	8001060 <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 8001058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800105a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]
} 
 8001068:	2000      	movs	r0, #0
 800106a:	bd10      	pop	{r4, pc}
 800106c:	40012c00 	.word	0x40012c00

08001070 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001070:	6a03      	ldr	r3, [r0, #32]
 8001072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001076:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001078:	6a02      	ldr	r2, [r0, #32]
{
 800107a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800107c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800107e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001080:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800108a:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800108c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800108e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001092:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001096:	4d0d      	ldr	r5, [pc, #52]	; (80010cc <TIM_OC5_SetConfig+0x5c>)
 8001098:	42a8      	cmp	r0, r5
 800109a:	d00b      	beq.n	80010b4 <TIM_OC5_SetConfig+0x44>
 800109c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80010a0:	42a8      	cmp	r0, r5
 80010a2:	d007      	beq.n	80010b4 <TIM_OC5_SetConfig+0x44>
 80010a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a8:	42a8      	cmp	r0, r5
 80010aa:	d003      	beq.n	80010b4 <TIM_OC5_SetConfig+0x44>
 80010ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b0:	42a8      	cmp	r0, r5
 80010b2:	d104      	bne.n	80010be <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80010b4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80010b6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80010ba:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010be:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80010c0:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80010c2:	684b      	ldr	r3, [r1, #4]
 80010c4:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80010c6:	6202      	str	r2, [r0, #32]
 80010c8:	bd30      	pop	{r4, r5, pc}
 80010ca:	bf00      	nop
 80010cc:	40012c00 	.word	0x40012c00

080010d0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80010d0:	6a03      	ldr	r3, [r0, #32]
 80010d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010d6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010d8:	6a02      	ldr	r2, [r0, #32]
{
 80010da:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80010dc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80010de:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80010e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80010ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80010f0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80010f4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80010f8:	4d0c      	ldr	r5, [pc, #48]	; (800112c <TIM_OC6_SetConfig+0x5c>)
 80010fa:	42a8      	cmp	r0, r5
 80010fc:	d00b      	beq.n	8001116 <TIM_OC6_SetConfig+0x46>
 80010fe:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001102:	42a8      	cmp	r0, r5
 8001104:	d007      	beq.n	8001116 <TIM_OC6_SetConfig+0x46>
 8001106:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800110a:	42a8      	cmp	r0, r5
 800110c:	d003      	beq.n	8001116 <TIM_OC6_SetConfig+0x46>
 800110e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001112:	42a8      	cmp	r0, r5
 8001114:	d104      	bne.n	8001120 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001116:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001118:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800111c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001120:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001122:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001124:	684b      	ldr	r3, [r1, #4]
 8001126:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001128:	6202      	str	r2, [r0, #32]
 800112a:	bd30      	pop	{r4, r5, pc}
 800112c:	40012c00 	.word	0x40012c00

08001130 <HAL_TIM_PWM_ConfigChannel>:
{
 8001130:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001132:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001136:	2b01      	cmp	r3, #1
{
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
 800113c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001140:	d010      	beq.n	8001164 <HAL_TIM_PWM_ConfigChannel+0x34>
 8001142:	2301      	movs	r3, #1
  switch (Channel)
 8001144:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001146:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800114a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800114e:	d043      	beq.n	80011d8 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8001150:	d809      	bhi.n	8001166 <HAL_TIM_PWM_ConfigChannel+0x36>
 8001152:	b1fa      	cbz	r2, 8001194 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001154:	2a04      	cmp	r2, #4
 8001156:	d02e      	beq.n	80011b6 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8001158:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800115a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800115c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001160:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001164:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001166:	2a10      	cmp	r2, #16
 8001168:	d047      	beq.n	80011fa <HAL_TIM_PWM_ConfigChannel+0xca>
 800116a:	2a14      	cmp	r2, #20
 800116c:	d056      	beq.n	800121c <HAL_TIM_PWM_ConfigChannel+0xec>
 800116e:	2a0c      	cmp	r2, #12
 8001170:	d1f2      	bne.n	8001158 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001172:	6820      	ldr	r0, [r4, #0]
 8001174:	f7ff fe5e 	bl	8000e34 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001178:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800117a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800117c:	69da      	ldr	r2, [r3, #28]
 800117e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001182:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001184:	69da      	ldr	r2, [r3, #28]
 8001186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800118a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800118c:	69da      	ldr	r2, [r3, #28]
 800118e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001192:	e030      	b.n	80011f6 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001194:	6820      	ldr	r0, [r4, #0]
 8001196:	f7ff fd91 	bl	8000cbc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800119a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800119c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	f042 0208 	orr.w	r2, r2, #8
 80011a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	f022 0204 	bic.w	r2, r2, #4
 80011ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80011b2:	619a      	str	r2, [r3, #24]
    break;
 80011b4:	e7d0      	b.n	8001158 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80011b6:	6820      	ldr	r0, [r4, #0]
 80011b8:	f7ff fdc4 	bl	8000d44 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80011bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80011be:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011d6:	e7ec      	b.n	80011b2 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80011d8:	6820      	ldr	r0, [r4, #0]
 80011da:	f7ff fdef 	bl	8000dbc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80011de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80011e0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80011e2:	69da      	ldr	r2, [r3, #28]
 80011e4:	f042 0208 	orr.w	r2, r2, #8
 80011e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80011ea:	69da      	ldr	r2, [r3, #28]
 80011ec:	f022 0204 	bic.w	r2, r2, #4
 80011f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80011f2:	69da      	ldr	r2, [r3, #28]
 80011f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80011f6:	61da      	str	r2, [r3, #28]
    break;
 80011f8:	e7ae      	b.n	8001158 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80011fa:	6820      	ldr	r0, [r4, #0]
 80011fc:	f7ff ff38 	bl	8001070 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001200:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001202:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001206:	f042 0208 	orr.w	r2, r2, #8
 800120a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800120c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001216:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001218:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800121a:	e79d      	b.n	8001158 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800121c:	6820      	ldr	r0, [r4, #0]
 800121e:	f7ff ff57 	bl	80010d0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001222:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001224:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001226:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800122e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001234:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001238:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800123c:	e7ec      	b.n	8001218 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08001240 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001240:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001244:	2b01      	cmp	r3, #1
{
 8001246:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001248:	d018      	beq.n	800127c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 800124a:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800124c:	4d0c      	ldr	r5, [pc, #48]	; (8001280 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 800124e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001250:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001252:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001254:	bf02      	ittt	eq
 8001256:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001258:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800125c:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800125e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001260:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001266:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001268:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 800126c:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800126e:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8001270:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001272:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001274:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001278:	4618      	mov	r0, r3
 800127a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800127c:	2002      	movs	r0, #2
} 
 800127e:	bd30      	pop	{r4, r5, pc}
 8001280:	40012c00 	.word	0x40012c00

08001284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001284:	b538      	push	{r3, r4, r5, lr}
 8001286:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001288:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800128a:	6921      	ldr	r1, [r4, #16]
 800128c:	68a3      	ldr	r3, [r4, #8]
 800128e:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001290:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001292:	430b      	orrs	r3, r1
 8001294:	6961      	ldr	r1, [r4, #20]
 8001296:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001298:	4949      	ldr	r1, [pc, #292]	; (80013c0 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800129a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800129c:	4001      	ands	r1, r0
 800129e:	430b      	orrs	r3, r1
 80012a0:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012a2:	686b      	ldr	r3, [r5, #4]
 80012a4:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012a6:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ac:	430b      	orrs	r3, r1
 80012ae:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012b0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012b2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012b4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012b8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012ba:	430b      	orrs	r3, r1
 80012bc:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <UART_SetConfig+0x140>)
 80012c0:	429d      	cmp	r5, r3
 80012c2:	d112      	bne.n	80012ea <UART_SetConfig+0x66>
 80012c4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80012c8:	493f      	ldr	r1, [pc, #252]	; (80013c8 <UART_SetConfig+0x144>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012d0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012d4:	5ccb      	ldrb	r3, [r1, r3]
 80012d6:	d13b      	bne.n	8001350 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d836      	bhi.n	800134a <UART_SetConfig+0xc6>
 80012dc:	e8df f003 	tbb	[pc, r3]
 80012e0:	3524210f 	.word	0x3524210f
 80012e4:	3535352d 	.word	0x3535352d
 80012e8:	30          	.byte	0x30
 80012e9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <UART_SetConfig+0x148>)
 80012ec:	429d      	cmp	r5, r3
 80012ee:	d003      	beq.n	80012f8 <UART_SetConfig+0x74>
 80012f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012f4:	429d      	cmp	r5, r3
 80012f6:	d15e      	bne.n	80013b6 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012fc:	d131      	bne.n	8001362 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80012fe:	f7ff fc2d 	bl	8000b5c <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001302:	6861      	ldr	r1, [r4, #4]
 8001304:	084a      	lsrs	r2, r1, #1
 8001306:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800130e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001310:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001312:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001316:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001318:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800131c:	4313      	orrs	r3, r2
 800131e:	60cb      	str	r3, [r1, #12]
 8001320:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001322:	f7ff fc33 	bl	8000b8c <HAL_RCC_GetPCLK2Freq>
 8001326:	e7ec      	b.n	8001302 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001328:	6860      	ldr	r0, [r4, #4]
 800132a:	0843      	lsrs	r3, r0, #1
 800132c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001330:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001334:	fbb3 f3f0 	udiv	r3, r3, r0
 8001338:	e7e9      	b.n	800130e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800133a:	f7ff fb33 	bl	80009a4 <HAL_RCC_GetSysClockFreq>
 800133e:	e7e0      	b.n	8001302 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001340:	6860      	ldr	r0, [r4, #4]
 8001342:	0843      	lsrs	r3, r0, #1
 8001344:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001348:	e7f4      	b.n	8001334 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 800134a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800134c:	2300      	movs	r3, #0
 800134e:	e7e0      	b.n	8001312 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8001350:	2b08      	cmp	r3, #8
 8001352:	d833      	bhi.n	80013bc <UART_SetConfig+0x138>
 8001354:	e8df f003 	tbb	[pc, r3]
 8001358:	321b1005 	.word	0x321b1005
 800135c:	32323227 	.word	0x32323227
 8001360:	2a          	.byte	0x2a
 8001361:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001362:	f7ff fbfb 	bl	8000b5c <HAL_RCC_GetPCLK1Freq>
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800136c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001370:	b280      	uxth	r0, r0
 8001372:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001374:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8001376:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001378:	f7ff fc08 	bl	8000b8c <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800137c:	6863      	ldr	r3, [r4, #4]
 800137e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001382:	fbb0 f0f3 	udiv	r0, r0, r3
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <UART_SetConfig+0x140>)
 8001388:	b280      	uxth	r0, r0
 800138a:	60d8      	str	r0, [r3, #12]
 800138c:	e7f2      	b.n	8001374 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800138e:	6862      	ldr	r2, [r4, #4]
 8001390:	0853      	lsrs	r3, r2, #1
 8001392:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001396:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800139a:	fbb3 f3f2 	udiv	r3, r3, r2
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <UART_SetConfig+0x140>)
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	60d3      	str	r3, [r2, #12]
 80013a4:	e7e6      	b.n	8001374 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013a6:	f7ff fafd 	bl	80009a4 <HAL_RCC_GetSysClockFreq>
 80013aa:	e7e7      	b.n	800137c <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80013ac:	6862      	ldr	r2, [r4, #4]
 80013ae:	0853      	lsrs	r3, r2, #1
 80013b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013b4:	e7f1      	b.n	800139a <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80013ba:	d0c6      	beq.n	800134a <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80013bc:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	efff69f3 	.word	0xefff69f3
 80013c4:	40013800 	.word	0x40013800
 80013c8:	08001f14 	.word	0x08001f14
 80013cc:	40004400 	.word	0x40004400

080013d0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013d2:	07da      	lsls	r2, r3, #31
{
 80013d4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013d6:	d506      	bpl.n	80013e6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013d8:	6801      	ldr	r1, [r0, #0]
 80013da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80013dc:	684a      	ldr	r2, [r1, #4]
 80013de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80013e2:	4322      	orrs	r2, r4
 80013e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80013e6:	079c      	lsls	r4, r3, #30
 80013e8:	d506      	bpl.n	80013f8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80013ea:	6801      	ldr	r1, [r0, #0]
 80013ec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013ee:	684a      	ldr	r2, [r1, #4]
 80013f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013f4:	4322      	orrs	r2, r4
 80013f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80013f8:	0759      	lsls	r1, r3, #29
 80013fa:	d506      	bpl.n	800140a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80013fc:	6801      	ldr	r1, [r0, #0]
 80013fe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001400:	684a      	ldr	r2, [r1, #4]
 8001402:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001406:	4322      	orrs	r2, r4
 8001408:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800140a:	071a      	lsls	r2, r3, #28
 800140c:	d506      	bpl.n	800141c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800140e:	6801      	ldr	r1, [r0, #0]
 8001410:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001412:	684a      	ldr	r2, [r1, #4]
 8001414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001418:	4322      	orrs	r2, r4
 800141a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800141c:	06dc      	lsls	r4, r3, #27
 800141e:	d506      	bpl.n	800142e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001420:	6801      	ldr	r1, [r0, #0]
 8001422:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001424:	688a      	ldr	r2, [r1, #8]
 8001426:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800142a:	4322      	orrs	r2, r4
 800142c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800142e:	0699      	lsls	r1, r3, #26
 8001430:	d506      	bpl.n	8001440 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001432:	6801      	ldr	r1, [r0, #0]
 8001434:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001436:	688a      	ldr	r2, [r1, #8]
 8001438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800143c:	4322      	orrs	r2, r4
 800143e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001440:	065a      	lsls	r2, r3, #25
 8001442:	d50f      	bpl.n	8001464 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001444:	6801      	ldr	r1, [r0, #0]
 8001446:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001448:	684a      	ldr	r2, [r1, #4]
 800144a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800144e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001450:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001454:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001456:	d105      	bne.n	8001464 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001458:	684a      	ldr	r2, [r1, #4]
 800145a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800145c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001460:	4322      	orrs	r2, r4
 8001462:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	d506      	bpl.n	8001476 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001468:	6802      	ldr	r2, [r0, #0]
 800146a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800146c:	6853      	ldr	r3, [r2, #4]
 800146e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001472:	430b      	orrs	r3, r1
 8001474:	6053      	str	r3, [r2, #4]
 8001476:	bd10      	pop	{r4, pc}

08001478 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800147c:	9d06      	ldr	r5, [sp, #24]
 800147e:	4604      	mov	r4, r0
 8001480:	460f      	mov	r7, r1
 8001482:	4616      	mov	r6, r2
 8001484:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001486:	6821      	ldr	r1, [r4, #0]
 8001488:	69ca      	ldr	r2, [r1, #28]
 800148a:	ea37 0302 	bics.w	r3, r7, r2
 800148e:	bf0c      	ite	eq
 8001490:	2201      	moveq	r2, #1
 8001492:	2200      	movne	r2, #0
 8001494:	42b2      	cmp	r2, r6
 8001496:	d002      	beq.n	800149e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
}
 800149a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800149e:	1c6b      	adds	r3, r5, #1
 80014a0:	d0f2      	beq.n	8001488 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014a2:	b99d      	cbnz	r5, 80014cc <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80014ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	f022 0201 	bic.w	r2, r2, #1
 80014b4:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80014b6:	2320      	movs	r3, #32
 80014b8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80014bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80014c0:	2300      	movs	r3, #0
 80014c2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80014c6:	2003      	movs	r0, #3
 80014c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014cc:	f7fe fed8 	bl	8000280 <HAL_GetTick>
 80014d0:	eba0 0008 	sub.w	r0, r0, r8
 80014d4:	4285      	cmp	r5, r0
 80014d6:	d2d6      	bcs.n	8001486 <UART_WaitOnFlagUntilTimeout+0xe>
 80014d8:	e7e4      	b.n	80014a4 <UART_WaitOnFlagUntilTimeout+0x2c>

080014da <UART_CheckIdleState>:
{
 80014da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014dc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014de:	2600      	movs	r6, #0
 80014e0:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80014e2:	f7fe fecd 	bl	8000280 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80014ec:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80014ee:	d417      	bmi.n	8001520 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	075b      	lsls	r3, r3, #29
 80014f6:	d50a      	bpl.n	800150e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80014f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	462b      	mov	r3, r5
 8001502:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff ffb6 	bl	8001478 <UART_WaitOnFlagUntilTimeout>
 800150c:	b9a0      	cbnz	r0, 8001538 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800150e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001510:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001512:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001516:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800151a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800151e:	e00c      	b.n	800153a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	4632      	mov	r2, r6
 8001528:	4603      	mov	r3, r0
 800152a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff ffa2 	bl	8001478 <UART_WaitOnFlagUntilTimeout>
 8001534:	2800      	cmp	r0, #0
 8001536:	d0db      	beq.n	80014f0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001538:	2003      	movs	r0, #3
}
 800153a:	b002      	add	sp, #8
 800153c:	bd70      	pop	{r4, r5, r6, pc}

0800153e <HAL_UART_Init>:
{
 800153e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001540:	4604      	mov	r4, r0
 8001542:	b360      	cbz	r0, 800159e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001544:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001548:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800154c:	b91b      	cbnz	r3, 8001556 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800154e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001552:	f000 fc3b 	bl	8001dcc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001556:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001558:	2324      	movs	r3, #36	; 0x24
 800155a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001566:	4620      	mov	r0, r4
 8001568:	f7ff fe8c 	bl	8001284 <UART_SetConfig>
 800156c:	2801      	cmp	r0, #1
 800156e:	d016      	beq.n	800159e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001572:	b113      	cbz	r3, 800157a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff ff2b 	bl	80013d0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800158a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001592:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800159a:	f7ff bf9e 	b.w	80014da <UART_CheckIdleState>
}
 800159e:	2001      	movs	r0, #1
 80015a0:	bd10      	pop	{r4, pc}
	...

080015a4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80015a4:	4601      	mov	r1, r0
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80015a6:	7a00      	ldrb	r0, [r0, #8]
 80015a8:	680b      	ldr	r3, [r1, #0]
{
 80015aa:	b510      	push	{r4, lr}
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d07f      	beq.n	80016b0 <LL_EXTI_Init+0x10c>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d045      	beq.n	8001640 <LL_EXTI_Init+0x9c>
    {
      switch (EXTI_InitStruct->Mode)
 80015b4:	7a4a      	ldrb	r2, [r1, #9]
 80015b6:	2a01      	cmp	r2, #1
 80015b8:	d028      	beq.n	800160c <LL_EXTI_Init+0x68>
 80015ba:	d303      	bcc.n	80015c4 <LL_EXTI_Init+0x20>
 80015bc:	2a02      	cmp	r2, #2
 80015be:	d02e      	beq.n	800161e <LL_EXTI_Init+0x7a>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 80015c0:	2001      	movs	r0, #1
 80015c2:	e008      	b.n	80015d6 <LL_EXTI_Init+0x32>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80015c4:	4a44      	ldr	r2, [pc, #272]	; (80016d8 <LL_EXTI_Init+0x134>)
 80015c6:	6850      	ldr	r0, [r2, #4]
 80015c8:	ea20 0003 	bic.w	r0, r0, r3
 80015cc:	6050      	str	r0, [r2, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80015ce:	6810      	ldr	r0, [r2, #0]
 80015d0:	4318      	orrs	r0, r3
 80015d2:	6010      	str	r0, [r2, #0]
  ErrorStatus status = SUCCESS;
 80015d4:	2000      	movs	r0, #0
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80015d6:	7a8a      	ldrb	r2, [r1, #10]
 80015d8:	b16a      	cbz	r2, 80015f6 <LL_EXTI_Init+0x52>
      {
        switch (EXTI_InitStruct->Trigger)
 80015da:	2a02      	cmp	r2, #2
 80015dc:	d023      	beq.n	8001626 <LL_EXTI_Init+0x82>
 80015de:	2a03      	cmp	r2, #3
 80015e0:	d02a      	beq.n	8001638 <LL_EXTI_Init+0x94>
 80015e2:	2a01      	cmp	r2, #1
 80015e4:	d12e      	bne.n	8001644 <LL_EXTI_Init+0xa0>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80015e6:	4a3c      	ldr	r2, [pc, #240]	; (80016d8 <LL_EXTI_Init+0x134>)
 80015e8:	68d4      	ldr	r4, [r2, #12]
 80015ea:	ea24 0403 	bic.w	r4, r4, r3
 80015ee:	60d4      	str	r4, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80015f0:	6894      	ldr	r4, [r2, #8]
 80015f2:	4323      	orrs	r3, r4
 80015f4:	6093      	str	r3, [r2, #8]
        }
      }
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80015f6:	684b      	ldr	r3, [r1, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d06b      	beq.n	80016d4 <LL_EXTI_Init+0x130>
    {
      switch (EXTI_InitStruct->Mode)
 80015fc:	7a4a      	ldrb	r2, [r1, #9]
 80015fe:	2a01      	cmp	r2, #1
 8001600:	d03c      	beq.n	800167c <LL_EXTI_Init+0xd8>
 8001602:	d321      	bcc.n	8001648 <LL_EXTI_Init+0xa4>
 8001604:	2a02      	cmp	r2, #2
 8001606:	d042      	beq.n	800168e <LL_EXTI_Init+0xea>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
          break;
        default:
          status = ERROR;
 8001608:	2001      	movs	r0, #1
 800160a:	e025      	b.n	8001658 <LL_EXTI_Init+0xb4>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800160c:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <LL_EXTI_Init+0x134>)
 800160e:	6810      	ldr	r0, [r2, #0]
 8001610:	ea20 0003 	bic.w	r0, r0, r3
  SET_BIT(EXTI->IMR, ExtiLine);
 8001614:	6010      	str	r0, [r2, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001616:	6850      	ldr	r0, [r2, #4]
 8001618:	4318      	orrs	r0, r3
 800161a:	6050      	str	r0, [r2, #4]
 800161c:	e7da      	b.n	80015d4 <LL_EXTI_Init+0x30>
  SET_BIT(EXTI->IMR, ExtiLine);
 800161e:	4a2e      	ldr	r2, [pc, #184]	; (80016d8 <LL_EXTI_Init+0x134>)
 8001620:	6810      	ldr	r0, [r2, #0]
 8001622:	4318      	orrs	r0, r3
 8001624:	e7f6      	b.n	8001614 <LL_EXTI_Init+0x70>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001626:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <LL_EXTI_Init+0x134>)
 8001628:	6894      	ldr	r4, [r2, #8]
 800162a:	ea24 0403 	bic.w	r4, r4, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 800162e:	6094      	str	r4, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001630:	68d4      	ldr	r4, [r2, #12]
 8001632:	4323      	orrs	r3, r4
 8001634:	60d3      	str	r3, [r2, #12]
 8001636:	e7de      	b.n	80015f6 <LL_EXTI_Init+0x52>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001638:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <LL_EXTI_Init+0x134>)
 800163a:	6894      	ldr	r4, [r2, #8]
 800163c:	431c      	orrs	r4, r3
 800163e:	e7f6      	b.n	800162e <LL_EXTI_Init+0x8a>
  ErrorStatus status = SUCCESS;
 8001640:	4618      	mov	r0, r3
 8001642:	e7d8      	b.n	80015f6 <LL_EXTI_Init+0x52>
            status = ERROR;
 8001644:	2001      	movs	r0, #1
 8001646:	e7d6      	b.n	80015f6 <LL_EXTI_Init+0x52>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001648:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <LL_EXTI_Init+0x134>)
 800164a:	6a54      	ldr	r4, [r2, #36]	; 0x24
 800164c:	ea24 0403 	bic.w	r4, r4, r3
 8001650:	6254      	str	r4, [r2, #36]	; 0x24
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001652:	6a14      	ldr	r4, [r2, #32]
 8001654:	431c      	orrs	r4, r3
 8001656:	6214      	str	r4, [r2, #32]
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001658:	7a8a      	ldrb	r2, [r1, #10]
 800165a:	2a00      	cmp	r2, #0
 800165c:	d03a      	beq.n	80016d4 <LL_EXTI_Init+0x130>
      {
        switch (EXTI_InitStruct->Trigger)
 800165e:	2a02      	cmp	r2, #2
 8001660:	d019      	beq.n	8001696 <LL_EXTI_Init+0xf2>
 8001662:	2a03      	cmp	r2, #3
 8001664:	d020      	beq.n	80016a8 <LL_EXTI_Init+0x104>
 8001666:	2a01      	cmp	r2, #1
 8001668:	d133      	bne.n	80016d2 <LL_EXTI_Init+0x12e>
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800166a:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <LL_EXTI_Init+0x134>)
 800166c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800166e:	ea21 0103 	bic.w	r1, r1, r3
 8001672:	62d1      	str	r1, [r2, #44]	; 0x2c
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001674:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001676:	430b      	orrs	r3, r1
 8001678:	6293      	str	r3, [r2, #40]	; 0x28
 800167a:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <LL_EXTI_Init+0x134>)
 800167e:	6a14      	ldr	r4, [r2, #32]
 8001680:	ea24 0403 	bic.w	r4, r4, r3
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001684:	6214      	str	r4, [r2, #32]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001686:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8001688:	431c      	orrs	r4, r3
 800168a:	6254      	str	r4, [r2, #36]	; 0x24
 800168c:	e7e4      	b.n	8001658 <LL_EXTI_Init+0xb4>
  SET_BIT(EXTI->IMR2, ExtiLine);
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <LL_EXTI_Init+0x134>)
 8001690:	6a14      	ldr	r4, [r2, #32]
 8001692:	431c      	orrs	r4, r3
 8001694:	e7f6      	b.n	8001684 <LL_EXTI_Init+0xe0>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <LL_EXTI_Init+0x134>)
 8001698:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800169a:	ea21 0103 	bic.w	r1, r1, r3
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800169e:	6291      	str	r1, [r2, #40]	; 0x28
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80016a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016a2:	430b      	orrs	r3, r1
 80016a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016a6:	bd10      	pop	{r4, pc}
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80016a8:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <LL_EXTI_Init+0x134>)
 80016aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016ac:	4319      	orrs	r1, r3
 80016ae:	e7f6      	b.n	800169e <LL_EXTI_Init+0xfa>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80016b0:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <LL_EXTI_Init+0x134>)
 80016b2:	6814      	ldr	r4, [r2, #0]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	401c      	ands	r4, r3
 80016b8:	6014      	str	r4, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80016ba:	6854      	ldr	r4, [r2, #4]
 80016bc:	4023      	ands	r3, r4
 80016be:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80016c0:	684b      	ldr	r3, [r1, #4]
 80016c2:	6a14      	ldr	r4, [r2, #32]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	401c      	ands	r4, r3
 80016c8:	6214      	str	r4, [r2, #32]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80016ca:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80016cc:	400b      	ands	r3, r1
 80016ce:	6253      	str	r3, [r2, #36]	; 0x24
 80016d0:	bd10      	pop	{r4, pc}
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
            break;
          default:
            status = ERROR;
 80016d2:	2001      	movs	r0, #1
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
#endif
  }
  return status;
}
 80016d4:	bd10      	pop	{r4, pc}
 80016d6:	bf00      	nop
 80016d8:	40010400 	.word	0x40010400

080016dc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80016dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80016e0:	680a      	ldr	r2, [r1, #0]
 80016e2:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80016e6:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80016ea:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80016ee:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80016f0:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80016f2:	fa32 f304 	lsrs.w	r3, r2, r4
 80016f6:	d10d      	bne.n	8001714 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016f8:	684b      	ldr	r3, [r1, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d806      	bhi.n	800170e <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001700:	6843      	ldr	r3, [r0, #4]
 8001702:	68c9      	ldr	r1, [r1, #12]
 8001704:	ea23 0302 	bic.w	r3, r3, r2
 8001708:	434a      	muls	r2, r1
 800170a:	431a      	orrs	r2, r3
 800170c:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800170e:	2000      	movs	r0, #0
 8001710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001714:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8001718:	4013      	ands	r3, r2
 800171a:	d069      	beq.n	80017f0 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800171c:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001720:	f8d0 9000 	ldr.w	r9, [r0]
 8001724:	fa93 fca3 	rbit	ip, r3
 8001728:	fabc fc8c 	clz	ip, ip
 800172c:	fa93 f6a3 	rbit	r6, r3
 8001730:	fab6 f686 	clz	r6, r6
 8001734:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001738:	fa05 fc0c 	lsl.w	ip, r5, ip
 800173c:	0076      	lsls	r6, r6, #1
 800173e:	ea29 0c0c 	bic.w	ip, r9, ip
 8001742:	fa08 f606 	lsl.w	r6, r8, r6
 8001746:	ea4c 0606 	orr.w	r6, ip, r6
 800174a:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800174c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001750:	2e01      	cmp	r6, #1
 8001752:	d816      	bhi.n	8001782 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001754:	6886      	ldr	r6, [r0, #8]
 8001756:	fa93 fca3 	rbit	ip, r3
 800175a:	fabc fc8c 	clz	ip, ip
 800175e:	fa93 f9a3 	rbit	r9, r3
 8001762:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001766:	fa05 fc0c 	lsl.w	ip, r5, ip
 800176a:	ea26 0c0c 	bic.w	ip, r6, ip
 800176e:	fab9 f989 	clz	r9, r9
 8001772:	688e      	ldr	r6, [r1, #8]
 8001774:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001778:	fa06 f609 	lsl.w	r6, r6, r9
 800177c:	ea4c 0606 	orr.w	r6, ip, r6
 8001780:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001782:	68c6      	ldr	r6, [r0, #12]
 8001784:	fa93 fca3 	rbit	ip, r3
 8001788:	fabc fc8c 	clz	ip, ip
 800178c:	fa93 f9a3 	rbit	r9, r3
 8001790:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001794:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001798:	ea26 0c0c 	bic.w	ip, r6, ip
 800179c:	fab9 f989 	clz	r9, r9
 80017a0:	690e      	ldr	r6, [r1, #16]
 80017a2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80017a6:	fa06 f609 	lsl.w	r6, r6, r9
 80017aa:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80017ae:	f1b8 0f02 	cmp.w	r8, #2
 80017b2:	60c6      	str	r6, [r0, #12]
 80017b4:	d11c      	bne.n	80017f0 <LL_GPIO_Init+0x114>
 80017b6:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80017ba:	fab6 f686 	clz	r6, r6
 80017be:	2e07      	cmp	r6, #7
 80017c0:	f8d1 c014 	ldr.w	ip, [r1, #20]
 80017c4:	dc16      	bgt.n	80017f4 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80017c6:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80017ca:	fa93 f6a3 	rbit	r6, r3
 80017ce:	fab6 f686 	clz	r6, r6
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	00b6      	lsls	r6, r6, #2
 80017dc:	fa07 f606 	lsl.w	r6, r7, r6
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	ea28 0606 	bic.w	r6, r8, r6
 80017e6:	fa0c fc03 	lsl.w	ip, ip, r3
 80017ea:	ea46 060c 	orr.w	r6, r6, ip
 80017ee:	6206      	str	r6, [r0, #32]
    pinpos++;
 80017f0:	3401      	adds	r4, #1
 80017f2:	e77e      	b.n	80016f2 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80017f4:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	fa93 f6a3 	rbit	r6, r3
 80017fe:	fab6 f686 	clz	r6, r6
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	fab3 f383 	clz	r3, r3
 800180a:	00b6      	lsls	r6, r6, #2
 800180c:	fa07 f606 	lsl.w	r6, r7, r6
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	ea28 0606 	bic.w	r6, r8, r6
 8001816:	fa0c f303 	lsl.w	r3, ip, r3
 800181a:	4333      	orrs	r3, r6
 800181c:	6243      	str	r3, [r0, #36]	; 0x24
 800181e:	e7e7      	b.n	80017f0 <LL_GPIO_Init+0x114>

08001820 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <LL_AHB1_GRP1_EnableClock+0x18>)
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	4302      	orrs	r2, r0
 8001826:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001828:	695b      	ldr	r3, [r3, #20]
{
 800182a:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800182c:	4018      	ands	r0, r3
 800182e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001830:	9b01      	ldr	r3, [sp, #4]
}
 8001832:	b002      	add	sp, #8
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800183c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001840:	b08a      	sub	sp, #40	; 0x28

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	2218      	movs	r2, #24
 8001844:	2100      	movs	r1, #0
 8001846:	a804      	add	r0, sp, #16
 8001848:	f000 fb40 	bl	8001ecc <memset>
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800184c:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800184e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001852:	9401      	str	r4, [sp, #4]
 8001854:	9402      	str	r4, [sp, #8]
 8001856:	9403      	str	r4, [sp, #12]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001858:	f7ff ffe2 	bl	8001820 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800185c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001860:	f7ff ffde 	bl	8001820 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001864:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001868:	f7ff ffda 	bl	8001820 <LL_AHB1_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800186c:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001870:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001874:	f7ff ffd4 	bl	8001820 <LL_AHB1_GRP1_EnableClock>
 8001878:	2620      	movs	r6, #32
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800187a:	482d      	ldr	r0, [pc, #180]	; (8001930 <MX_GPIO_Init+0xf4>)
 800187c:	62ae      	str	r6, [r5, #40]	; 0x28
 800187e:	6942      	ldr	r2, [r0, #20]
 8001880:	23f0      	movs	r3, #240	; 0xf0
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	2102      	movs	r1, #2
 8001888:	fab3 f383 	clz	r3, r3
 800188c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	4313      	orrs	r3, r2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001896:	4f27      	ldr	r7, [pc, #156]	; (8001934 <MX_GPIO_Init+0xf8>)
 8001898:	6143      	str	r3, [r0, #20]
 800189a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800189e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a2:	fa92 f3a2 	rbit	r3, r2
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	2003      	movs	r0, #3
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa00 f303 	lsl.w	r3, r0, r3
 80018b2:	ea2e 0303 	bic.w	r3, lr, r3
 80018b6:	fa92 fea2 	rbit	lr, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80018bc:	f8d7 e000 	ldr.w	lr, [r7]
 80018c0:	fa92 f3a2 	rbit	r3, r2
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa00 f303 	lsl.w	r3, r0, r3
 80018ce:	ea2e 0303 	bic.w	r3, lr, r3
 80018d2:	fa92 f0a2 	rbit	r0, r2
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.LineCommand = ENABLE;
 80018d6:	f04f 0801 	mov.w	r8, #1
 80018da:	603b      	str	r3, [r7, #0]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 80018dc:	a801      	add	r0, sp, #4
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80018de:	9201      	str	r2, [sp, #4]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80018e0:	f88d 100e 	strb.w	r1, [sp, #14]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80018e4:	9402      	str	r4, [sp, #8]
  EXTI_InitStruct.LineCommand = ENABLE;
 80018e6:	f88d 800c 	strb.w	r8, [sp, #12]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80018ea:	f88d 400d 	strb.w	r4, [sp, #13]
  LL_EXTI_Init(&EXTI_InitStruct);
 80018ee:	f7ff fe59 	bl	80015a4 <LL_EXTI_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018f2:	a904      	add	r1, sp, #16
 80018f4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LD2_Pin;
 80018f6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018f8:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018fc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018fe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001900:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001902:	f7ff feeb 	bl	80016dc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 8001906:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001908:	a904      	add	r1, sp, #16
 800190a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 800190c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800190e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001910:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f7ff fee3 	bl	80016dc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_CHB_Pin|ENC_CHA_Pin|ENC_CHR_Pin;
 8001916:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	a904      	add	r1, sp, #16
 800191c:	4806      	ldr	r0, [pc, #24]	; (8001938 <MX_GPIO_Init+0xfc>)
  GPIO_InitStruct.Pin = ENC_CHB_Pin|ENC_CHA_Pin|ENC_CHR_Pin;
 800191e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001920:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001922:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f7ff feda 	bl	80016dc <LL_GPIO_Init>

}
 8001928:	b00a      	add	sp, #40	; 0x28
 800192a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800192e:	bf00      	nop
 8001930:	40010000 	.word	0x40010000
 8001934:	48000800 	.word	0x48000800
 8001938:	48000400 	.word	0x48000400

0800193c <CNC_PollSignal_2>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800193c:	4a34      	ldr	r2, [pc, #208]	; (8001a10 <CNC_PollSignal_2+0xd4>)
 800193e:	4935      	ldr	r1, [pc, #212]	; (8001a14 <CNC_PollSignal_2+0xd8>)
 8001940:	6913      	ldr	r3, [r2, #16]
  }
  /* USER CODE END 3 */
}

void CNC_PollSignal_2(void)
{
 8001942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	CNT_DirPin_State = LL_GPIO_IsInputPinSet(DIR_GPIO_Port,DIR_Pin);
	ENC_APin_State = LL_GPIO_IsInputPinSet(ENC_CHA_GPIO_Port,ENC_CHA_Pin);
	ENC_BPin_State = LL_GPIO_IsInputPinSet(ENC_CHB_GPIO_Port,ENC_CHB_Pin);
	ENC_RotPin_State = LL_GPIO_IsInputPinSet(ENC_CHR_GPIO_Port,ENC_CHR_Pin);

	if(CNT_StepPin_State != CNT_StepPin_Old_State)
 8001946:	4d34      	ldr	r5, [pc, #208]	; (8001a18 <CNC_PollSignal_2+0xdc>)
 8001948:	6917      	ldr	r7, [r2, #16]
 800194a:	f895 c000 	ldrb.w	ip, [r5]
 800194e:	6908      	ldr	r0, [r1, #16]
 8001950:	690a      	ldr	r2, [r1, #16]
 8001952:	6909      	ldr	r1, [r1, #16]
 8001954:	f003 0840 	and.w	r8, r3, #64	; 0x40
	CNT_StepPin_State = LL_GPIO_IsInputPinSet(STEP_GPIO_Port,STEP_Pin);
 8001958:	f3c3 1380 	ubfx	r3, r3, #6, #1
	if(CNT_StepPin_State != CNT_StepPin_Old_State)
 800195c:	459c      	cmp	ip, r3
 800195e:	f400 4e80 	and.w	lr, r0, #16384	; 0x4000
 8001962:	f402 5400 	and.w	r4, r2, #8192	; 0x2000
 8001966:	f401 4600 	and.w	r6, r1, #32768	; 0x8000
	ENC_APin_State = LL_GPIO_IsInputPinSet(ENC_CHA_GPIO_Port,ENC_CHA_Pin);
 800196a:	f3c0 3080 	ubfx	r0, r0, #14, #1
	ENC_BPin_State = LL_GPIO_IsInputPinSet(ENC_CHB_GPIO_Port,ENC_CHB_Pin);
 800196e:	f3c2 3240 	ubfx	r2, r2, #13, #1
	ENC_RotPin_State = LL_GPIO_IsInputPinSet(ENC_CHR_GPIO_Port,ENC_CHR_Pin);
 8001972:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 8001976:	46ac      	mov	ip, r5
	if(CNT_StepPin_State != CNT_StepPin_Old_State)
 8001978:	d00d      	beq.n	8001996 <CNC_PollSignal_2+0x5a>
	{
		if(CNT_StepPin_State == GPIO_PIN_SET)
 800197a:	f1b8 0f00 	cmp.w	r8, #0
 800197e:	d008      	beq.n	8001992 <CNC_PollSignal_2+0x56>
 8001980:	4d26      	ldr	r5, [pc, #152]	; (8001a1c <CNC_PollSignal_2+0xe0>)
		{
			if(CNT_DirPin_State == GPIO_PIN_SET)Set_Pos++;
 8001982:	f017 0f20 	tst.w	r7, #32
 8001986:	682f      	ldr	r7, [r5, #0]
 8001988:	bf14      	ite	ne
 800198a:	3701      	addne	r7, #1
			else Set_Pos --;
 800198c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8001990:	602f      	str	r7, [r5, #0]
		}
		CNT_StepPin_Old_State = CNT_StepPin_State;
 8001992:	f88c 3000 	strb.w	r3, [ip]
	}

	if(ENC_APin_State != ENC_APin_Old_State)
 8001996:	4d22      	ldr	r5, [pc, #136]	; (8001a20 <CNC_PollSignal_2+0xe4>)
 8001998:	782b      	ldrb	r3, [r5, #0]
 800199a:	4283      	cmp	r3, r0
 800199c:	d00b      	beq.n	80019b6 <CNC_PollSignal_2+0x7a>
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <CNC_PollSignal_2+0xe8>)
	{

		if(ENC_APin_State == GPIO_PIN_SET && ENC_BPin_State == GPIO_PIN_SET) Axis_Pos ++;
 80019a0:	f1be 0f00 	cmp.w	lr, #0
 80019a4:	d013      	beq.n	80019ce <CNC_PollSignal_2+0x92>
 80019a6:	681f      	ldr	r7, [r3, #0]
 80019a8:	b114      	cbz	r4, 80019b0 <CNC_PollSignal_2+0x74>
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_SET) Axis_Pos --;
		if(ENC_APin_State == GPIO_PIN_SET && ENC_BPin_State == GPIO_PIN_RESET) Axis_Pos --;
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_RESET) Axis_Pos ++;
 80019aa:	3701      	adds	r7, #1
 80019ac:	e001      	b.n	80019b2 <CNC_PollSignal_2+0x76>
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_SET) Axis_Pos --;
 80019ae:	681f      	ldr	r7, [r3, #0]
		if(ENC_APin_State == GPIO_PIN_SET && ENC_BPin_State == GPIO_PIN_RESET) Axis_Pos --;
 80019b0:	3f01      	subs	r7, #1
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_RESET) Axis_Pos ++;
 80019b2:	601f      	str	r7, [r3, #0]

		ENC_APin_Old_State = ENC_APin_State;
 80019b4:	7028      	strb	r0, [r5, #0]
	}

	if(ENC_BPin_State != ENC_BPin_Old_State)
 80019b6:	481c      	ldr	r0, [pc, #112]	; (8001a28 <CNC_PollSignal_2+0xec>)
 80019b8:	7803      	ldrb	r3, [r0, #0]
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d011      	beq.n	80019e2 <CNC_PollSignal_2+0xa6>
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <CNC_PollSignal_2+0xe8>)
	{
		if(ENC_APin_State == GPIO_PIN_SET && ENC_BPin_State == GPIO_PIN_SET) Axis_Pos --;
 80019c0:	f1be 0f00 	cmp.w	lr, #0
 80019c4:	d007      	beq.n	80019d6 <CNC_PollSignal_2+0x9a>
 80019c6:	b144      	cbz	r4, 80019da <CNC_PollSignal_2+0x9e>
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_SET) Axis_Pos ++;
		if(ENC_APin_State == GPIO_PIN_SET && ENC_BPin_State == GPIO_PIN_RESET) Axis_Pos ++;
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_RESET) Axis_Pos --;
 80019c8:	681c      	ldr	r4, [r3, #0]
 80019ca:	3c01      	subs	r4, #1
 80019cc:	e007      	b.n	80019de <CNC_PollSignal_2+0xa2>
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_SET) Axis_Pos --;
 80019ce:	2c00      	cmp	r4, #0
 80019d0:	d1ed      	bne.n	80019ae <CNC_PollSignal_2+0x72>
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_RESET) Axis_Pos ++;
 80019d2:	681f      	ldr	r7, [r3, #0]
 80019d4:	e7e9      	b.n	80019aa <CNC_PollSignal_2+0x6e>
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_SET) Axis_Pos ++;
 80019d6:	2c00      	cmp	r4, #0
 80019d8:	d0f6      	beq.n	80019c8 <CNC_PollSignal_2+0x8c>
		if(ENC_APin_State == GPIO_PIN_SET && ENC_BPin_State == GPIO_PIN_RESET) Axis_Pos ++;
 80019da:	681c      	ldr	r4, [r3, #0]
 80019dc:	3401      	adds	r4, #1
		if(ENC_APin_State == GPIO_PIN_RESET && ENC_BPin_State == GPIO_PIN_RESET) Axis_Pos --;
 80019de:	601c      	str	r4, [r3, #0]
		ENC_BPin_Old_State = ENC_BPin_State;
 80019e0:	7002      	strb	r2, [r0, #0]
	}
	//Por implementar
	if(ENC_RotPin_State != ENC_RotPin_Old_State)
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <CNC_PollSignal_2+0xf0>)
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	428a      	cmp	r2, r1
 80019e8:	d00a      	beq.n	8001a00 <CNC_PollSignal_2+0xc4>
	{
		if(ENC_RotPin_State == GPIO_PIN_SET)
 80019ea:	b146      	cbz	r6, 80019fe <CNC_PollSignal_2+0xc2>
		{
			Aux_Axis_Pos = Axis_Pos;
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <CNC_PollSignal_2+0xe8>)
 80019ee:	4810      	ldr	r0, [pc, #64]	; (8001a30 <CNC_PollSignal_2+0xf4>)
 80019f0:	6814      	ldr	r4, [r2, #0]
 80019f2:	6004      	str	r4, [r0, #0]
			Axis_Pos = 0;
 80019f4:	2000      	movs	r0, #0
 80019f6:	6010      	str	r0, [r2, #0]
			Flag_rotation = 1;
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <CNC_PollSignal_2+0xf8>)
 80019fa:	2001      	movs	r0, #1
 80019fc:	6010      	str	r0, [r2, #0]
		}
		//Sucede cuando el motor da una rotacion
		ENC_RotPin_Old_State = ENC_RotPin_State;
 80019fe:	7019      	strb	r1, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8001a00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a04:	6953      	ldr	r3, [r2, #20]
 8001a06:	f083 0320 	eor.w	r3, r3, #32
 8001a0a:	6153      	str	r3, [r2, #20]
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
	//HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)== 0
	//HAL_
}
 8001a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a10:	48000800 	.word	0x48000800
 8001a14:	48000400 	.word	0x48000400
 8001a18:	20000030 	.word	0x20000030
 8001a1c:	20000040 	.word	0x20000040
 8001a20:	20000031 	.word	0x20000031
 8001a24:	2000002c 	.word	0x2000002c
 8001a28:	20000032 	.word	0x20000032
 8001a2c:	20000033 	.word	0x20000033
 8001a30:	20000028 	.word	0x20000028
 8001a34:	20000038 	.word	0x20000038

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3c:	2228      	movs	r2, #40	; 0x28
 8001a3e:	2100      	movs	r1, #0
 8001a40:	a806      	add	r0, sp, #24
 8001a42:	f000 fa43 	bl	8001ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a46:	2100      	movs	r1, #0
 8001a48:	2214      	movs	r2, #20
 8001a4a:	a801      	add	r0, sp, #4
 8001a4c:	f000 fa3e 	bl	8001ecc <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a50:	2301      	movs	r3, #1
 8001a52:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a54:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a5c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a60:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a62:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a68:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a6a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6e:	f7fe fd23 	bl	80004b8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a72:	230f      	movs	r3, #15
 8001a74:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a80:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a82:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a84:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a86:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a88:	f7fe ffbe 	bl	8000a08 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001a8c:	b010      	add	sp, #64	; 0x40
 8001a8e:	bd10      	pop	{r4, pc}

08001a90 <main>:
{
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8001a94:	f7fe fbd6 	bl	8000244 <HAL_Init>
  SystemClock_Config();
 8001a98:	f7ff ffce 	bl	8001a38 <SystemClock_Config>
  MX_GPIO_Init();
 8001a9c:	f7ff fece 	bl	800183c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001aa0:	f000 f976 	bl	8001d90 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001aa4:	f000 f91a 	bl	8001cdc <MX_TIM3_Init>
  PID.Kp = PID_PARAM_KP;        /* Proporcional */
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <main+0xf4>)
 8001aaa:	9309      	str	r3, [sp, #36]	; 0x24
  PID.Ki = PID_PARAM_KI;        /* Integral */
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <main+0xf8>)
 8001aae:	930a      	str	r3, [sp, #40]	; 0x28
  arm_pid_init_f32(&PID, 1);
 8001ab0:	2101      	movs	r1, #1
  PID.Kd = PID_PARAM_KD;        /* Derivative */
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <main+0xfc>)
 8001ab4:	930b      	str	r3, [sp, #44]	; 0x2c
  arm_pid_init_f32(&PID, 1);
 8001ab6:	a803      	add	r0, sp, #12
 8001ab8:	f7fe fb86 	bl	80001c8 <arm_pid_init_f32>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001abc:	2100      	movs	r1, #0
 8001abe:	4834      	ldr	r0, [pc, #208]	; (8001b90 <main+0x100>)
	if(Axis_Pos >= Set_Pos)
 8001ac0:	4c34      	ldr	r4, [pc, #208]	; (8001b94 <main+0x104>)
 8001ac2:	4d35      	ldr	r5, [pc, #212]	; (8001b98 <main+0x108>)
 8001ac4:	4e35      	ldr	r6, [pc, #212]	; (8001b9c <main+0x10c>)
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001ac6:	f7ff fab1 	bl	800102c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001aca:	2104      	movs	r1, #4
 8001acc:	4830      	ldr	r0, [pc, #192]	; (8001b90 <main+0x100>)
 8001ace:	f7ff faad 	bl	800102c <HAL_TIM_PWM_Start>
  TIM3->CCR2 = 0;
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <main+0x110>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR1 = 0;
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
	CNC_PollSignal_2();
 8001ada:	f7ff ff2f 	bl	800193c <CNC_PollSignal_2>
	if(Axis_Pos >= Set_Pos)
 8001ade:	6822      	ldr	r2, [r4, #0]
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	429a      	cmp	r2, r3
		Err_In = Axis_Pos - Set_Pos;//update error
 8001ae4:	bfab      	itete	ge
 8001ae6:	6823      	ldrge	r3, [r4, #0]
		Err_In = Set_Pos - Axis_Pos;//update error
 8001ae8:	682b      	ldrlt	r3, [r5, #0]
		Err_In = Axis_Pos - Set_Pos;//update error
 8001aea:	682a      	ldrge	r2, [r5, #0]
		Err_In = Set_Pos - Axis_Pos;//update error
 8001aec:	6822      	ldrlt	r2, [r4, #0]
		Err_In = Axis_Pos - Set_Pos;//update error
 8001aee:	bfab      	itete	ge
 8001af0:	1a9b      	subge	r3, r3, r2
		Err_In = Set_Pos - Axis_Pos;//update error
 8001af2:	1a9b      	sublt	r3, r3, r2
		Flag_Invert = 0;
 8001af4:	2200      	movge	r2, #0
		Flag_Invert = 1;
 8001af6:	2201      	movlt	r2, #1
	if(Err_In >= SERVO_MAX_ERR)
 8001af8:	2b27      	cmp	r3, #39	; 0x27
		Flag_Invert = 1;
 8001afa:	6032      	str	r2, [r6, #0]
	if(Err_In >= SERVO_MAX_ERR)
 8001afc:	dded      	ble.n	8001ada <main+0x4a>
		Out_Response = arm_pid_f32(&PID, Err_In);
 8001afe:	ee07 3a90 	vmov	s15, r3
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001b02:	eddd 6a06 	vldr	s13, [sp, #24]
    out = (S->A0 * in) +
 8001b06:	ed9d 6a03 	vldr	s12, [sp, #12]
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001b0a:	eddd 5a05 	vldr	s11, [sp, #20]
 8001b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b12:	eddd 7a04 	vldr	s15, [sp, #16]

    /* Update state */
    S->state[1] = S->state[0];
    S->state[0] = in;
 8001b16:	ed8d 7a06 	vstr	s14, [sp, #24]
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001b1e:	eee7 7a06 	vfma.f32	s15, s14, s12
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001b22:	ed9d 6a07 	vldr	s12, [sp, #28]
		if(Out_Response > 4095) Out_Response = 4095;
 8001b26:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ba4 <main+0x114>
    S->state[1] = S->state[0];
 8001b2a:	edcd 6a07 	vstr	s13, [sp, #28]
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001b2e:	eee5 7a86 	vfma.f32	s15, s11, s12
    out = (S->A0 * in) +
 8001b32:	ed9d 6a08 	vldr	s12, [sp, #32]
 8001b36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    S->state[2] = out;
 8001b42:	edcd 7a08 	vstr	s15, [sp, #32]
 8001b46:	dc18      	bgt.n	8001b7a <main+0xea>
		if(Out_Response < 0) Out_Response = 0;
 8001b48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b4c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ba8 <main+0x118>
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	bf48      	it	mi
 8001b56:	eef0 7a47 	vmovmi.f32	s15, s14
		OutputScaled = Out_Response;
 8001b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5e:	4a13      	ldr	r2, [pc, #76]	; (8001bac <main+0x11c>)
 8001b60:	edcd 7a01 	vstr	s15, [sp, #4]
 8001b64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if(Flag_Invert)
 8001b68:	6831      	ldr	r1, [r6, #0]
		OutputScaled = Out_Response;
 8001b6a:	8013      	strh	r3, [r2, #0]
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <main+0x110>)
 8001b6e:	011b      	lsls	r3, r3, #4
		if(Flag_Invert)
 8001b70:	b131      	cbz	r1, 8001b80 <main+0xf0>
			TIM3->CCR2 = OutputScaled << 4;
 8001b72:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR1 = 0;
 8001b74:	2300      	movs	r3, #0
			TIM3->CCR1 = OutputScaled << 4;
 8001b76:	6353      	str	r3, [r2, #52]	; 0x34
 8001b78:	e7af      	b.n	8001ada <main+0x4a>
		if(Out_Response > 4095) Out_Response = 4095;
 8001b7a:	eef0 7a47 	vmov.f32	s15, s14
 8001b7e:	e7ec      	b.n	8001b5a <main+0xca>
			TIM3->CCR2 = 0;
 8001b80:	6391      	str	r1, [r2, #56]	; 0x38
 8001b82:	e7f8      	b.n	8001b76 <main+0xe6>
 8001b84:	42c80000 	.word	0x42c80000
 8001b88:	3ccccccd 	.word	0x3ccccccd
 8001b8c:	41a80000 	.word	0x41a80000
 8001b90:	20000048 	.word	0x20000048
 8001b94:	2000002c 	.word	0x2000002c
 8001b98:	20000040 	.word	0x20000040
 8001b9c:	20000034 	.word	0x20000034
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	457ff000 	.word	0x457ff000
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	2000003c 	.word	0x2000003c

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_MspInit+0x34>)
{
 8001bb6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	619a      	str	r2, [r3, #24]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	f002 0201 	and.w	r2, r2, #1
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bd0:	61da      	str	r2, [r3, #28]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bda:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bdc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bde:	f7fe fb55 	bl	800028c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be2:	b003      	add	sp, #12
 8001be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001be8:	40021000 	.word	0x40021000

08001bec <NMI_Handler>:
 8001bec:	4770      	bx	lr

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler>

08001bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf2:	e7fe      	b.n	8001bf2 <BusFault_Handler>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler>

08001bf6 <SVC_Handler>:
 8001bf6:	4770      	bx	lr

08001bf8 <DebugMon_Handler>:
 8001bf8:	4770      	bx	lr

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	4770      	bx	lr

08001bfc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f7fe bb34 	b.w	8000268 <HAL_IncTick>

08001c00 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c00:	4915      	ldr	r1, [pc, #84]	; (8001c58 <SystemInit+0x58>)
 8001c02:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <SystemInit+0x5c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001c18:	6858      	ldr	r0, [r3, #4]
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <SystemInit+0x60>)
 8001c1c:	4002      	ands	r2, r0
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c32:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001c3a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3e:	f022 020f 	bic.w	r2, r2, #15
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001c44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c46:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <SystemInit+0x64>)
 8001c48:	4002      	ands	r2, r0
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c54:	608b      	str	r3, [r1, #8]
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	f87fc00c 	.word	0xf87fc00c
 8001c64:	ff00fccc 	.word	0xff00fccc

08001c68 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8001c68:	6802      	ldr	r2, [r0, #0]
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_TIM_Base_MspInit+0x24>)
 8001c6c:	429a      	cmp	r2, r3
{
 8001c6e:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 8001c70:	d10a      	bne.n	8001c88 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c72:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	f042 0202 	orr.w	r2, r2, #2
 8001c7c:	61da      	str	r2, [r3, #28]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c88:	b002      	add	sp, #8
 8001c8a:	4770      	bx	lr
 8001c8c:	40000400 	.word	0x40000400

08001c90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c90:	b510      	push	{r4, lr}
 8001c92:	4604      	mov	r4, r0
 8001c94:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	2214      	movs	r2, #20
 8001c98:	2100      	movs	r1, #0
 8001c9a:	a801      	add	r0, sp, #4
 8001c9c:	f000 f916 	bl	8001ecc <memset>
  if(timHandle->Instance==TIM3)
 8001ca0:	6822      	ldr	r2, [r4, #0]
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_TIM_MspPostInit+0x48>)
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d114      	bne.n	8001cd2 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cb4:	615a      	str	r2, [r3, #20]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001cc0:	2350      	movs	r3, #80	; 0x50
 8001cc2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ccc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f7fe fb39 	bl	8000344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cd2:	b006      	add	sp, #24
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40000400 	.word	0x40000400

08001cdc <MX_TIM3_Init>:
{
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	a803      	add	r0, sp, #12
 8001ce6:	f000 f8f1 	bl	8001ecc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cea:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cec:	221c      	movs	r2, #28
 8001cee:	eb0d 0002 	add.w	r0, sp, r2
 8001cf2:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	9400      	str	r4, [sp, #0]
 8001cf6:	9401      	str	r4, [sp, #4]
 8001cf8:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfa:	f000 f8e7 	bl	8001ecc <memset>
  htim3.Instance = TIM3;
 8001cfe:	4822      	ldr	r0, [pc, #136]	; (8001d88 <MX_TIM3_Init+0xac>)
  htim3.Init.Prescaler = 899;
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <MX_TIM3_Init+0xb0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 899;
 8001d04:	f240 3383 	movw	r3, #899	; 0x383
 8001d08:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 3;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d12:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d14:	f7fe ff9e 	bl	8000c54 <HAL_TIM_Base_Init>
 8001d18:	b108      	cbz	r0, 8001d1e <MX_TIM3_Init+0x42>
    Error_Handler();
 8001d1a:	f7ff ff49 	bl	8001bb0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d22:	a903      	add	r1, sp, #12
 8001d24:	4818      	ldr	r0, [pc, #96]	; (8001d88 <MX_TIM3_Init+0xac>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d26:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d28:	f7ff f8be 	bl	8000ea8 <HAL_TIM_ConfigClockSource>
 8001d2c:	b108      	cbz	r0, 8001d32 <MX_TIM3_Init+0x56>
    Error_Handler();
 8001d2e:	f7ff ff3f 	bl	8001bb0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d32:	4815      	ldr	r0, [pc, #84]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d34:	f7fe ffa8 	bl	8000c88 <HAL_TIM_PWM_Init>
 8001d38:	b108      	cbz	r0, 8001d3e <MX_TIM3_Init+0x62>
    Error_Handler();
 8001d3a:	f7ff ff39 	bl	8001bb0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3e:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d40:	4669      	mov	r1, sp
 8001d42:	4811      	ldr	r0, [pc, #68]	; (8001d88 <MX_TIM3_Init+0xac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d44:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d48:	f7ff fa7a 	bl	8001240 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	b108      	cbz	r0, 8001d52 <MX_TIM3_Init+0x76>
    Error_Handler();
 8001d4e:	f7ff ff2f 	bl	8001bb0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d52:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d54:	2200      	movs	r2, #0
 8001d56:	a907      	add	r1, sp, #28
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <MX_TIM3_Init+0xac>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d5a:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001d5c:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5e:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d60:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d62:	f7ff f9e5 	bl	8001130 <HAL_TIM_PWM_ConfigChannel>
 8001d66:	b108      	cbz	r0, 8001d6c <MX_TIM3_Init+0x90>
    Error_Handler();
 8001d68:	f7ff ff22 	bl	8001bb0 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	a907      	add	r1, sp, #28
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d72:	f7ff f9dd 	bl	8001130 <HAL_TIM_PWM_ConfigChannel>
 8001d76:	b108      	cbz	r0, 8001d7c <MX_TIM3_Init+0xa0>
    Error_Handler();
 8001d78:	f7ff ff1a 	bl	8001bb0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d7e:	f7ff ff87 	bl	8001c90 <HAL_TIM_MspPostInit>
}
 8001d82:	b00e      	add	sp, #56	; 0x38
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	bf00      	nop
 8001d88:	20000048 	.word	0x20000048
 8001d8c:	40000400 	.word	0x40000400

08001d90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d90:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001d92:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 38400;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_USART2_UART_Init+0x38>)
 8001d96:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 8001d9a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d9e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da0:	2300      	movs	r3, #0
 8001da2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001da4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001da6:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dae:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db2:	f7ff fbc4 	bl	800153e <HAL_UART_Init>
 8001db6:	b118      	cbz	r0, 8001dc0 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8001db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001dbc:	f7ff bef8 	b.w	8001bb0 <Error_Handler>
 8001dc0:	bd08      	pop	{r3, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000088 	.word	0x20000088
 8001dc8:	40004400 	.word	0x40004400

08001dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4604      	mov	r4, r0
 8001dd0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	2214      	movs	r2, #20
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	a803      	add	r0, sp, #12
 8001dd8:	f000 f878 	bl	8001ecc <memset>
  if(uartHandle->Instance==USART2)
 8001ddc:	6822      	ldr	r2, [r4, #0]
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_UART_MspInit+0x60>)
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d120      	bne.n	8001e26 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dea:	69da      	ldr	r2, [r3, #28]
 8001dec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001df0:	61da      	str	r2, [r3, #28]
 8001df2:	69da      	ldr	r2, [r3, #28]
 8001df4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001df8:	9201      	str	r2, [sp, #4]
 8001dfa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e02:	615a      	str	r2, [r3, #20]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e0e:	230c      	movs	r3, #12
 8001e10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f7fe fa8f 	bl	8000344 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e26:	b008      	add	sp, #32
 8001e28:	bd10      	pop	{r4, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40004400 	.word	0x40004400

08001e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e36:	e003      	b.n	8001e40 <LoopCopyDataInit>

08001e38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e3e:	3104      	adds	r1, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e40:	480b      	ldr	r0, [pc, #44]	; (8001e70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e48:	d3f6      	bcc.n	8001e38 <CopyDataInit>
	ldr	r2, =_sbss
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e4c:	e002      	b.n	8001e54 <LoopFillZerobss>

08001e4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e50:	f842 3b04 	str.w	r3, [r2], #4

08001e54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <LoopForever+0x16>)
	cmp	r2, r3
 8001e56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e58:	d3f9      	bcc.n	8001e4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e5a:	f7ff fed1 	bl	8001c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f000 f811 	bl	8001e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e62:	f7ff fe15 	bl	8001a90 <main>

08001e66 <LoopForever>:

LoopForever:
    b LoopForever
 8001e66:	e7fe      	b.n	8001e66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e68:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001e6c:	08001f38 	.word	0x08001f38
	ldr	r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e74:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001e78:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001e7c:	200000f8 	.word	0x200000f8

08001e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC1_2_IRQHandler>
	...

08001e84 <__libc_init_array>:
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	4e0d      	ldr	r6, [pc, #52]	; (8001ebc <__libc_init_array+0x38>)
 8001e88:	4c0d      	ldr	r4, [pc, #52]	; (8001ec0 <__libc_init_array+0x3c>)
 8001e8a:	1ba4      	subs	r4, r4, r6
 8001e8c:	10a4      	asrs	r4, r4, #2
 8001e8e:	2500      	movs	r5, #0
 8001e90:	42a5      	cmp	r5, r4
 8001e92:	d109      	bne.n	8001ea8 <__libc_init_array+0x24>
 8001e94:	4e0b      	ldr	r6, [pc, #44]	; (8001ec4 <__libc_init_array+0x40>)
 8001e96:	4c0c      	ldr	r4, [pc, #48]	; (8001ec8 <__libc_init_array+0x44>)
 8001e98:	f000 f820 	bl	8001edc <_init>
 8001e9c:	1ba4      	subs	r4, r4, r6
 8001e9e:	10a4      	asrs	r4, r4, #2
 8001ea0:	2500      	movs	r5, #0
 8001ea2:	42a5      	cmp	r5, r4
 8001ea4:	d105      	bne.n	8001eb2 <__libc_init_array+0x2e>
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
 8001ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eac:	4798      	blx	r3
 8001eae:	3501      	adds	r5, #1
 8001eb0:	e7ee      	b.n	8001e90 <__libc_init_array+0xc>
 8001eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eb6:	4798      	blx	r3
 8001eb8:	3501      	adds	r5, #1
 8001eba:	e7f2      	b.n	8001ea2 <__libc_init_array+0x1e>
 8001ebc:	08001f30 	.word	0x08001f30
 8001ec0:	08001f30 	.word	0x08001f30
 8001ec4:	08001f30 	.word	0x08001f30
 8001ec8:	08001f34 	.word	0x08001f34

08001ecc <memset>:
 8001ecc:	4402      	add	r2, r0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <memset+0xa>
 8001ed4:	4770      	bx	lr
 8001ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eda:	e7f9      	b.n	8001ed0 <memset+0x4>

08001edc <_init>:
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	bf00      	nop
 8001ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee2:	bc08      	pop	{r3}
 8001ee4:	469e      	mov	lr, r3
 8001ee6:	4770      	bx	lr

08001ee8 <_fini>:
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	bf00      	nop
 8001eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eee:	bc08      	pop	{r3}
 8001ef0:	469e      	mov	lr, r3
 8001ef2:	4770      	bx	lr
